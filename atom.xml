<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>anye137&#39;s blogs</title>
  
  
  <link href="http://anye137.github.io/atom.xml" rel="self"/>
  
  <link href="http://anye137.github.io/"/>
  <updated>2022-04-03T18:42:02.352Z</updated>
  <id>http://anye137.github.io/</id>
  
  <author>
    <name>anye137</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022-04-04-与同事的闲聊</title>
    <link href="http://anye137.github.io/2022/chat_with_colleague/"/>
    <id>http://anye137.github.io/2022/chat_with_colleague/</id>
    <published>2022-04-03T18:12:22.000Z</published>
    <updated>2022-04-03T18:42:02.352Z</updated>
    
    <content type="html"><![CDATA[<p>2022年，我的第一篇生活日记——记一次与同事的闲聊。</p><a id="more"></a><p>受疫情影响，公司开始居家办公。由于居家效率低，我还是经常去公司工作的。那一天，刚好同事 A 也去公司上班了。所以我们晚饭就约一起吃。A 虽然和我同样是应届生，但技术过硬，令人佩服。</p><p>恰饭的时候，A 问我当初为啥没有留在广东。我说当时腾讯没面过。他又问，为啥没有面过呢。听到这个问题，我第一感觉也是挺奇怪的，一般说面不过，不就是因为水平不够嘛。于是我回答水平不够。但 A 又问了，为啥水平不够呢？听到他的问题，我又愣了，不知如何回答，只能随口说项目没说好。</p><p>晚上下班后，我反思了下。恰饭的时候，我还觉得 A 问的问题有点奇怪，且过于直接。但其实，他问得还是挺好的。是啊，我为什么水平不够呢？这个本应是我秋招时就应该理清的问题。结果到现在工作半年多了，我还一直没有去思考自己的薄弱点，去提升自己的不足之处。</p><p>emm，现在来想想，自己当初为啥有些面试没过呢，可能主要有以下几个原因：</p><ol><li>做的项目一般，没有啥亮点</li><li>自驱能力弱，没有去主动推进项目</li><li>技术广度深度都不够</li></ol><p>希望，后面的职业生涯，能够慢慢解决以上几个不足之处把。FROM NOW ON ！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2022年，我的第一篇生活日记——记一次与同事的闲聊。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://anye137.github.io/categories/随笔/"/>
    
    
    <category term="随笔" scheme="http://anye137.github.io/tags/随笔/"/>
    
  </entry>
  
  <entry>
    <title>我又回来了</title>
    <link href="http://anye137.github.io/2022/come-back/"/>
    <id>http://anye137.github.io/2022/come-back/</id>
    <published>2022-04-03T17:43:25.000Z</published>
    <updated>2022-04-03T18:12:35.214Z</updated>
    
    <content type="html"><![CDATA[<p>我又回来写博客了。</p><a id="more"></a><p>上一篇 hexo 博客已经是四年前写的了。中间曾去过简书平台写过几篇博客，后面也不了了之。之所以没有坚持下去，主要还是输入不够，所以就没啥可输出的。在加上自己太懒，所以博客荒废了许久。</p><p>这次回归，主要还是因为偶然看到了公司一位同事的 <a href="http://pea3nut.info/" target="_blank" rel="noopener">blog</a>，感觉写得很好，深感佩服。再加上最近自己生活和学习状态确实不够好，所以希望写写博客，通过对外输出，改善一下自己的状态（虽然也没啥人看我的博客）。预计后面的博客应该是以生活日记为主，偶尔会更一下八股文笔记和推荐系统相关笔记。</p><p>时不我待，加油！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我又回来写博客了。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://anye137.github.io/categories/随笔/"/>
    
    
    <category term="随笔" scheme="http://anye137.github.io/tags/随笔/"/>
    
  </entry>
  
  <entry>
    <title>爬虫之破解极验验证（滑动验证码）</title>
    <link href="http://anye137.github.io/2018/crawler-geetest/"/>
    <id>http://anye137.github.io/2018/crawler-geetest/</id>
    <published>2018-06-18T01:21:59.000Z</published>
    <updated>2022-04-03T13:22:07.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>说实话，本文代码主要是参考网上资料的。</p><p>极验验证的滑动验证码如下：</p><img src="/images/2018/06-18-1.png" align="center"><p>其实网上有许多破解极验验证的教程，主要分为两种，一种是<font color="red"><strong>手动分析各种请求</strong></font>，另一种是直接<font color="red"><strong>使用 Selenium 模拟浏览器</strong></font>。前者，破解过程繁琐，开发久，但是运行速度快；后者，开发快，但是运行很慢。。考虑到极验验证一直在更换各种请求 URL，参数等等（毕竟人家靠这个吃饭的啊），手动分析的方法时效性不强。所以，本文主要参考使用 Selenium 破解验证码的方法。</p><a id="more"></a><p>本文所使用的验证码例子如下：</p><p><a href="https://www.geetest.com/type/" target="_blank" rel="noopener">极验验证-验证例子</a></p><p>破解过程如下：</p><blockquote><ol><li>访问该页面，点击 “滑动行为验证”，点击 “点击按钮进行验证”，使得滑动验证码出现。</li><li>获取验证码图像和带缺口的验证码图像</li><li>比对两张图像，获得滑块位移</li><li>模拟滑块运动，进行验证</li></ol></blockquote><p>本文代码使用的库如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait <span class="keyword">as</span> Wait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> Expect</span><br><span class="line"><span class="keyword">import</span> new.anti.easing <span class="keyword">as</span> easing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br></pre></td></tr></table></figure><br><h1 id="1-滑动验证码的出现"><a href="#1-滑动验证码的出现" class="headerlink" title="1. 滑动验证码的出现"></a>1. 滑动验证码的出现</h1><p>这个比较简单啦，首先使用 Selenium 访问网页：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome(</span><br><span class="line">    executable_path=<span class="string">"e:/chromedriver.exe"</span>,</span><br><span class="line">    chrome_options=chrome_options</span><br><span class="line">)</span><br><span class="line">browser.get(<span class="string">'http://www.geetest.com/type/'</span>)</span><br><span class="line"></span><br><span class="line">Wait(browser, <span class="number">60</span>).until(</span><br><span class="line">    Expect.visibility_of_element_located((By.CLASS_NAME, <span class="string">"products-content"</span>))</span><br><span class="line">)</span><br><span class="line">time.sleep(<span class="number">1.2</span>)</span><br></pre></td></tr></table></figure><p>接着，点击 “滑动行为验证”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slide_captcha = browser.find_element_by_xpath(<span class="string">'//div[@class="products-content"]/ul/li[2]'</span>)</span><br><span class="line">slide_captcha.click()</span><br><span class="line">Wait(browser, <span class="number">60</span>).until(</span><br><span class="line">    Expect.visibility_of_element_located((By.CLASS_NAME, <span class="string">"geetest_radar_tip_content"</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后，点击 “点击按钮进行验证”，就出现验证图片了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">validate = browser.find_element_by_xpath(<span class="string">'//span[@class="geetest_radar_tip_content"]'</span>)</span><br><span class="line">validate.click()</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><br><h1 id="2-获取验证码图像和带缺口的验证码图像"><a href="#2-获取验证码图像和带缺口的验证码图像" class="headerlink" title="2. 获取验证码图像和带缺口的验证码图像"></a>2. 获取验证码图像和带缺口的验证码图像</h1><p>这里用到 Selenium 的截图功能。Selenium 对元素截图会出错（原因我也不知，网上这样说的。。）。所以，我们要全屏截图，然后裁剪出验证码图像。在这里，我们要截取的元素，是重叠的。<strong>对于重叠的元素，我们先执行 JS 脚本，移除部分元素或者使得元素不可见，再截图</strong>。获取图像的函数如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pictures</span><span class="params">(browser)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">'''</span></span><br><span class="line"><span class="string">        var x = document.getElementsByClassName("geetest_canvas_slice geetest_absolute");</span></span><br><span class="line"><span class="string">        x[0].style.display="none";</span></span><br><span class="line"><span class="string">        var y = document.getElementsByClassName("geetest_canvas_fullbg geetest_fade geetest_absolute");</span></span><br><span class="line"><span class="string">        y[0].style.display="none";</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    time.sleep(<span class="number">0.8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 带缺口的验证码图像的全屏截图</span></span><br><span class="line">    browser.save_screenshot(<span class="string">'img1.jpg'</span>)</span><br><span class="line">    <span class="comment"># 裁剪验证码图像</span></span><br><span class="line">    crop_picture(<span class="string">'img1.jpg'</span>)</span><br><span class="line"></span><br><span class="line">    browser.execute_script(<span class="string">'''</span></span><br><span class="line"><span class="string">        var x = document.getElementsByClassName("geetest_canvas_bg geetest_absolute");</span></span><br><span class="line"><span class="string">        x[0].style.display="none";</span></span><br><span class="line"><span class="string">        var y = document.getElementsByClassName("geetest_canvas_fullbg geetest_fade geetest_absolute");</span></span><br><span class="line"><span class="string">        y[0].style.display="block";</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    time.sleep(<span class="number">0.8</span>)</span><br><span class="line">    <span class="comment"># 不带缺口的验证码图像的全屏截图</span></span><br><span class="line">    browser.save_screenshot(<span class="string">'img2.jpg'</span>)</span><br><span class="line">    <span class="comment"># 裁剪验证码图像</span></span><br><span class="line">    crop_picture(<span class="string">'img2.jpg'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使元素恢复成可见的</span></span><br><span class="line">    browser.execute_script(<span class="string">'''</span></span><br><span class="line"><span class="string">        var x = document.getElementsByClassName("geetest_canvas_bg geetest_absolute");</span></span><br><span class="line"><span class="string">        x[0].style.display="block";</span></span><br><span class="line"><span class="string">        var y = document.getElementsByClassName("geetest_canvas_slice geetest_absolute");</span></span><br><span class="line"><span class="string">        y[0].style.display="block";</span></span><br><span class="line"><span class="string">    '''</span>)</span><br></pre></td></tr></table></figure><p>其中，裁剪函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crop_picture</span><span class="params">(filename)</span>:</span></span><br><span class="line">    left = <span class="number">830</span></span><br><span class="line">    top = <span class="number">335</span></span><br><span class="line">    right = left + <span class="number">260</span></span><br><span class="line">    bottom = top + <span class="number">160</span></span><br><span class="line"></span><br><span class="line">    im = Image.open(filename)</span><br><span class="line">    im = im.crop((left, top, right, bottom))</span><br><span class="line">    im.save(filename)</span><br></pre></td></tr></table></figure><p>260 和 160 是验证码图像的宽度和高度。830 和 335 是根据屏幕的高和宽以及验证码图像的高和宽计算出来的。对于不同的浏览器和不同的显示器，这些数值可能不一样。合理的话，应该使用程序获取这些高度和宽度并计算的。但是我懒得写了。。</p><br><h1 id="3-比对两张图像，获得滑块位移"><a href="#3-比对两张图像，获得滑块位移" class="headerlink" title="3. 比对两张图像，获得滑块位移"></a>3. 比对两张图像，获得滑块位移</h1><p>这里，是对两张图片逐个像素进行匹配，如果某个像素点不匹配，该像素点就是滑块缺口的左上顶点。滑块的位移是水平方向的，初始滑块左上顶底横坐标大约是 12，所以 <code>offset = j - 12</code>。</p><p>但是实际上，我们截图的时候，截的验证码位置可能有误差，所以计算位移要考虑到误差的影响。在我这里，设置为 <code>offset = j</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_offset</span><span class="params">(image1, image2, threshold)</span>:</span></span><br><span class="line">    offset = <span class="number">-1</span></span><br><span class="line">    img1 = cv2.imread(image1)</span><br><span class="line">    img2 = cv2.imread(image2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">260</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">160</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> match(img1[i][j], img2[i][j], threshold):           </span><br><span class="line">                offset = j</span><br><span class="line">                <span class="keyword">return</span> offset</span><br><span class="line">    <span class="keyword">return</span> offset</span><br></pre></td></tr></table></figure><p>匹配函数如下（注意 imread 函数读到的像素值是 uint8 类型，相减之后可能溢出，所以要转为 int）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(i1, i2, t)</span>:</span></span><br><span class="line">    p1 = [int(p) <span class="keyword">for</span> p <span class="keyword">in</span> i1]</span><br><span class="line">    p2 = [int(p) <span class="keyword">for</span> p <span class="keyword">in</span> i2]</span><br><span class="line">    <span class="keyword">if</span> abs(p1[<span class="number">0</span>] - p2[<span class="number">0</span>]) &lt; t <span class="keyword">and</span> abs(p1[<span class="number">1</span>] - p2[<span class="number">1</span>]) &lt; t <span class="keyword">and</span> abs(p1[<span class="number">2</span>] - p2[<span class="number">2</span>]) &lt; t:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>有个问题，就是，为什么我们要设置一个阈值呢？显而易见的原因是，图像之间可能存在少许误差嘛。不过，实际上，这个阈值设置得蛮大的（我设置为 50），这是因为，有些验证码图像加入了一些阴影干扰。</p><img src="/images/2018/06-18-2.png" align="center"><img src="/images/2018/06-18-3.png" align="center"><p>所以，像素之间差距小于阈值的，我们可以认为是跟原图像一样的，或者是阴影干扰项。</p><br><h1 id="4-模拟滑块运动，进行验证"><a href="#4-模拟滑块运动，进行验证" class="headerlink" title="4. 模拟滑块运动，进行验证"></a>4. 模拟滑块运动，进行验证</h1><p>注意，得到位移后，不能进行简单的匀速拖拽，因为极验验证会识别是否是机器操作的。所以，拖拽的的过程要精心设计。这里，我啥都没干。。哈哈。直接 copy 了网上的代码，成功率还是蛮高的。验证的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_crack</span><span class="params">(browser, offset)</span>:</span></span><br><span class="line">    knob = browser.find_element_by_class_name(<span class="string">"geetest_slider_button"</span>)</span><br><span class="line">    fake_drag(browser, knob, offset)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>里面调用的函数，可以去参考资料 [2] 那里看</p><br><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>[1] (极验滑动验证最新破解实践（18年1月底）)[<a href="https://zhuanlan.zhihu.com/p/31995134]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31995134]</a></p><p>[2] (使用 Python + Selenium 破解滑块验证码)[<a href="http://www.aneasystone.com/archives/2018/03/python-selenium-geetest-crack.html]" target="_blank" rel="noopener">http://www.aneasystone.com/archives/2018/03/python-selenium-geetest-crack.html]</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;说实话，本文代码主要是参考网上资料的。&lt;/p&gt;
&lt;p&gt;极验验证的滑动验证码如下：&lt;/p&gt;
&lt;img src=&quot;/images/2018/06-18-1.png&quot; align=&quot;center&quot;&gt;

&lt;p&gt;其实网上有许多破解极验验证的教程，主要分为两种，一种是&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;手动分析各种请求&lt;/strong&gt;&lt;/font&gt;，另一种是直接&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;使用 Selenium 模拟浏览器&lt;/strong&gt;&lt;/font&gt;。前者，破解过程繁琐，开发久，但是运行速度快；后者，开发快，但是运行很慢。。考虑到极验验证一直在更换各种请求 URL，参数等等（毕竟人家靠这个吃饭的啊），手动分析的方法时效性不强。所以，本文主要参考使用 Selenium 破解验证码的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="爬虫" scheme="http://anye137.github.io/categories/爬虫/"/>
    
    
    <category term="爬虫" scheme="http://anye137.github.io/tags/爬虫/"/>
    
    <category term="极限验证" scheme="http://anye137.github.io/tags/极限验证/"/>
    
    <category term="滑动验证码" scheme="http://anye137.github.io/tags/滑动验证码/"/>
    
  </entry>
  
  <entry>
    <title>Mysql + Grafana 监控爬虫程序</title>
    <link href="http://anye137.github.io/2018/crawler-monitor/"/>
    <id>http://anye137.github.io/2018/crawler-monitor/</id>
    <published>2018-06-16T08:38:20.000Z</published>
    <updated>2022-04-03T13:22:07.399Z</updated>
    
    <content type="html"><![CDATA[<p>在使用爬虫爬取<strong>大量</strong>数据的时候，一般我们都会把程序挂在服务器上运行，然后就可以去干别的事情了。但是，我们还是有必要定时看一下程序运行情况的。虽然我们可以通过 log 信息来监控程序运行情况，但这往往不够直观。所以，今天我就讲讲如何使用 Mysql 和 Grafana 监控爬虫程序的<strong>运行状况</strong>，并<strong>可视化</strong>。</p><a id="more"></a><br><h1 id="1-Grafana-简介"><a href="#1-Grafana-简介" class="headerlink" title="1. Grafana 简介"></a>1. Grafana 简介</h1><blockquote><p>Grafana 是一个数据可视化工具，它并不收集数据，但是可以从数据源（例如 Graphite、Mysql、InfluxDB等）中获取数据并可视化。</p></blockquote><br><h1 id="2-运行-Grafana"><a href="#2-运行-Grafana" class="headerlink" title="2. 运行 Grafana"></a>2. 运行 Grafana</h1><p>Grafana 安装教程可以去网上搜，不多说。这里说的是另一种替代方法：使用已经安装好 Grafana 的 Docker 镜像（效果也是一样的）。如果不了解 Docker 的话，可以看下教程 <a href="https://docker_practice.gitee.io/" target="_blank" rel="noopener">Docker — 从入门到实践</a></p><p>在这里，我们需要先安装好 Docker，并学会一些 Docker 基本命令，例如拉取镜像，容器的创建，容器的运行停止，镜像和容器的删除等等。</p><p>安装并运行 Docker 之后：</p><ol><li><p>在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker hub</a> 搜索一下包含 Grafana 的镜像，还是出现挺多个的。这里我选择了 <a href="https://hub.docker.com/r/kamon/grafana_graphite/" target="_blank" rel="noopener"><a href="https://hub.docker.com/u/kamon/" target="_blank" rel="noopener">kamon</a>&#x2F;<a href="https://hub.docker.com/r/kamon/grafana_graphite/" target="_blank" rel="noopener">grafana_graphite</a>  </a> </p></li><li><p>在服务器上拉取镜像</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kamon/grafana_graphite</span><br></pre></td></tr></table></figure><ol start="3"><li>使用该镜像创建容器，并在后台运行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -d \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  -p 81:81 \</span><br><span class="line">  -p 2003:2003 \</span><br><span class="line">  -p 8125:8125/udp\</span><br><span class="line">  -p 8126:8126\</span><br><span class="line">  --name=grafana_graphite \</span><br><span class="line">  kamon/grafana_graphite</span><br></pre></td></tr></table></figure></li></ol><p>到这里，我们就得到了一个已经安装了 Grafana 的容器，根本就不用我们手动安装了O(∩_∩)O 哈哈~</p><ol start="4"><li>在浏览器中打开 <a href="http://your_server_ip/%EF%BC%8C%E7%99%BB%E5%BD%95%EF%BC%88%E5%88%9D%E5%A7%8B%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AF" target="_blank" rel="noopener">http://your_server_ip:80/，登录（初始用户名和密码都是</a> admin），我们就可以看到 Grafana 的控制台了，还是挺酷炫的！</li></ol><br><h1 id="3-编写爬虫程序并运行"><a href="#3-编写爬虫程序并运行" class="headerlink" title="3. 编写爬虫程序并运行"></a>3. 编写爬虫程序并运行</h1><p>略。（在这里，要将爬取到的 item 储存起来，例如插入 mysql 数据库）</p><br><h1 id="4-编写监控的脚本并运行"><a href="#4-编写监控的脚本并运行" class="headerlink" title="4. 编写监控的脚本并运行"></a>4. 编写监控的脚本并运行</h1><p>这里，我们要每隔一定时间查询爬取总量，并计算爬取速度。下面是一个例子：<br>代码分为两部分，首先是在我们存放 item 的数据库建立两个表，每个表有两个字段，一个是查询时间，另一个是 <code>item_total / item_min</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql <span class="keyword">as</span> mdb</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放爬取数据的数据库（这里我把统计的数据，存入了爬取数据所在的数据库）</span></span><br><span class="line">DB_NAME = <span class="string">'db_name'</span></span><br><span class="line">TABLE_NAME1 = <span class="string">'item_per_min'</span></span><br><span class="line">TABLE_NAME2 = <span class="string">'item_total'</span></span><br><span class="line">host = <span class="string">'your_server_ip'</span></span><br><span class="line">user = <span class="string">'your_user_name'</span></span><br><span class="line">passwd = <span class="string">'your_pwd'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取的 item 存放的表</span></span><br><span class="line">item_table = <span class="string">'item_table'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">()</span>:</span></span><br><span class="line">    use_db_str = <span class="string">'use '</span> + DB_NAME</span><br><span class="line">    create_table_str1 = <span class="string">"CREATE TABLE if not exists "</span> + TABLE_NAME1 + <span class="string">"""(</span></span><br><span class="line"><span class="string">      `time` datetime NOT NULL,</span></span><br><span class="line"><span class="string">      `speed` int NOT NULL DEFAULT '0'</span></span><br><span class="line"><span class="string">    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;"""</span></span><br><span class="line"></span><br><span class="line">    create_table_str2 = <span class="string">"CREATE TABLE if not exists "</span> + TABLE_NAME2 + <span class="string">"""(</span></span><br><span class="line"><span class="string">        `time` datetime NOT NULL,</span></span><br><span class="line"><span class="string">        `total` int NOT NULL DEFAULT '0'   </span></span><br><span class="line"><span class="string">        ) ENGINE=InnoDB DEFAULT CHARSET=utf8;"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库连接</span></span><br><span class="line">    conn = mdb.connect(host, user, passwd)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(use_db_str)</span><br><span class="line">        cursor.execute(create_table_str1)</span><br><span class="line">        cursor.execute(create_table_str2)</span><br><span class="line">        conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><p>代码第二部分是主函数，每隔一分钟查询 items 数，并计算爬取速度，将得到的数据储存起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建表</span></span><br><span class="line">    create_table()</span><br><span class="line">    conn = mdb.connect(host, user, passwd, DB_NAME)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">    before_item = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor.execute(<span class="string">'SELECT count(*) FROM %s'</span>, item_table )</span><br><span class="line">            result = cursor.fetchone()</span><br><span class="line">            current_item = result[<span class="number">0</span>]</span><br><span class="line">            print(current_item)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 过去一分钟爬取量</span></span><br><span class="line">            cursor.execute(<span class="string">'insert into %s values (now(), %s)'</span> % (TABLE_NAME1, current_item - before_item))</span><br><span class="line">            <span class="comment"># 爬取总量</span></span><br><span class="line">            cursor.execute(<span class="string">'insert into %s values (now(), %s)'</span> % (TABLE_NAME2, current_item))</span><br><span class="line"></span><br><span class="line">            conn.commit()</span><br><span class="line">            before_item = current_item</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p>监控脚本写完后，就可以挂在服务器后台运行了</p><br><h1 id="5-Grafana-配置"><a href="#5-Grafana-配置" class="headerlink" title="5. Grafana 配置"></a>5. Grafana 配置</h1><ol><li><p>配置数据源，这里命名为 <code>monitor_crawler</code></p><p>​</p></li></ol><img src="/images/2018/06-09-1.png" align="center"><ol start="2"><li><p>新建 Dashboard，然后点击 Graph 图标创建图，接着点击 <code>Panel Title</code> -&gt; <code>Edit</code></p><p>​</p></li></ol><img src="/images/2018/06-09-2.png" align="center"><ol start="3"><li><p>选择我们刚才创建的数据源 <code>monitor_crawler</code></p><p>​</p></li></ol><img src="/images/2018/06-09-3.png" align="center"><ol start="4"><li>按照 Grafana 提供的模板填写 sql 语句，这里查询了 <code>item_per_min</code> 表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  UNIX_TIMESTAMP(time) as time_sec,</span><br><span class="line">  speed as value,</span><br><span class="line">  &apos;items_min&apos; as metric</span><br><span class="line">FROM item_per_min</span><br></pre></td></tr></table></figure></li></ol><p>（注意我们选择的是 <code>Time series</code>）</p><img src="/images/2018/06-09-4.png" align="center"><ol start="5"><li><p>可以选择绘图模式，一般是选 <code>Lines</code></p><p>​</p></li></ol><img src="/images/2018/06-09-5.png" align="center"><h1 id="6-成果展示"><a href="#6-成果展示" class="headerlink" title="6. 成果展示"></a>6. 成果展示</h1><img src="/images/2018/06-09-6.png" align="center"><p>（其实 Grafana 还有很多很酷炫的设置，大家有兴趣可以去探索一下！）</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在安装好各种环境之后，Mysql + Grafana 监控爬虫程序的步骤：</p><blockquote><ol><li>编写爬虫程序</li><li>编写监控脚本，将爬取速度和爬取总量定时存进 Mysql 数据库</li><li>Grafana 新建数据源，连接对应的 Mysql 数据库</li><li>创建新的 Dashboard，并在里面创建图表，图表数据源选择我们上一步新建的数据源</li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在使用爬虫爬取&lt;strong&gt;大量&lt;/strong&gt;数据的时候，一般我们都会把程序挂在服务器上运行，然后就可以去干别的事情了。但是，我们还是有必要定时看一下程序运行情况的。虽然我们可以通过 log 信息来监控程序运行情况，但这往往不够直观。所以，今天我就讲讲如何使用 Mysql 和 Grafana 监控爬虫程序的&lt;strong&gt;运行状况&lt;/strong&gt;，并&lt;strong&gt;可视化&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="爬虫" scheme="http://anye137.github.io/categories/爬虫/"/>
    
    
    <category term="爬虫" scheme="http://anye137.github.io/tags/爬虫/"/>
    
    <category term="监控" scheme="http://anye137.github.io/tags/监控/"/>
    
    <category term="Mysql" scheme="http://anye137.github.io/tags/Mysql/"/>
    
    <category term="Grafana" scheme="http://anye137.github.io/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>爬虫获取 JS 动态数据（万方数据库文献下载）</title>
    <link href="http://anye137.github.io/2018/crawler-js-wanfang/"/>
    <id>http://anye137.github.io/2018/crawler-js-wanfang/</id>
    <published>2018-06-16T08:05:05.000Z</published>
    <updated>2022-04-03T13:22:07.399Z</updated>
    
    <content type="html"><![CDATA[<p>今天讲讲用爬虫下载<font color="red"><strong>万方数据库文献</strong></font>。</p><a id="more"></a><p>这是我们要爬取的文献链接:<br><a href="http://www.wanfangdata.com.cn/details/detail.do?_type=perio&id=zgtx201803009" target="_blank" rel="noopener">http://www.wanfangdata.com.cn/details/detail.do?_type&#x3D;perio&amp;id&#x3D;zgtx201803009</a></p><img src="/images/2018/06-07-1.jpg" align="center"><p>右键那个下载按钮 -&gt; 检查，我们可以看见，按钮的点击事件是一个 js 函数<font color="red"> upload() </font>。</p><img src="/images/2018/06-07-2.jpg" align="center"><p>在网页源代码中，寻找这个 <code>upload()</code> 函数，发现它只在按钮处出现了一次。所以，这个函数应该是由 js 文件加载的。<br>在网页源代码中，寻找 <code>.js</code>（搜索 js 文件），点击每一个 js 文件的链接，看看里面有没有 <code>upload()</code> 函数（这个方法貌似有点蠢，不知有没有更高效的方法）。最后在下图这个文件找到了：</p><img src="/images/2018/06-07-3.jpg" align="center"><p><code>upload()</code> 函数代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onlineReading</span>(<span class="params">page_cnt,id,language,source_db,title,isoa,type,resourceType</span>)</span>&#123;</span><br><span class="line">title=<span class="built_in">window</span>.encodeURI(<span class="built_in">window</span>.encodeURI(title));</span><br><span class="line"><span class="keyword">var</span> type = $(<span class="string">"#document_type"</span>).val();</span><br><span class="line"><span class="keyword">if</span>(type == <span class="string">"standards"</span>)&#123;</span><br><span class="line">type=<span class="string">"standard"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">"/search/onlineread.do?page_cnt="</span>+page_cnt+<span class="string">"&amp;language="</span>+language+<span class="string">"&amp;resourceType="</span>+type+<span class="string">"&amp;source="</span>+source_db+<span class="string">"&amp;resourceId="</span>+id+<span class="string">"&amp;resourceTitle="</span>+title+<span class="string">"&amp;isoa="</span>+isoa+<span class="string">"&amp;type="</span>+type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这个函数构造了一个 url， 并在一个新的标签页打开了这个 url。<br>把参数填进去，构造出的 url 为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.wanfangdata.com.cn/search/downLoad.do?page_cnt=16&amp;language=eng&amp;resourceType=perio&amp;source=WF&amp;resourceId=zgtx201803009&amp;resourceTitle=Spectral Efficiency and Power Allocation for Mixed-ADC Massive MIMO System&amp;isoa=0&amp;type=perio</span><br></pre></td></tr></table></figure><p>在浏览器中访问该 url ，发现我们看到的网址，并不是我们构造出的请求 url，说明应该是发生了重定向。</p><p>在一个新标签页中，按 F12 监听请求，并打开我们的请求 url</p><img src="/images/2018/06-07-4.jpg" align="center"><p>可以看到，我们构造的 url（也就是 <font color="red">downLoad.do?</font> ），重定向到了 <font color="red">submitWeb.do?</font> 。点击 <code>submitWeb.do</code> ，我们可以看到它重定向到了 <font color="red">transaction?</font>，最后才重定向到 <font color="red">downloadliterature.do?</font></p><p>写爬虫时，我们要确保能够到达 <code>downliterature.do?</code>，后面才能下载文件。所以我们先写程序看看能不能提取出这个 <code>downloadliterature.do?</code> 的详细 url。</p><p>首先是用正则表达式提取 <code>upload()</code> 函数的参数，然后构造出请求 url，这里我懒得写了，直接 copy 一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://www.wanfangdata.com.cn/search/downLoad.do?page_cnt=16&amp;language=eng&amp;resourceType=perio&amp;source=WF&amp;resourceId=zgtx201803009&amp;resourceTitle=Spectral Efficiency and Power Allocation for Mixed-ADC Massive MIMO System&amp;isoa=0&amp;type=perio'</span></span><br></pre></td></tr></table></figure><p>接着发起请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.url)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">200</span><br><span class="line">http://www.wanfangdata.com.cn/pay/downloadliterature.do?type=perio&amp;title=Spectral+Efficiency+and+Power+Allocation+for+Mixed-ADC+Massive+MIMO+System&amp;id=zgtx201803009&amp;isresult=false&amp;transaction=%7B%22id%22%3Anull%2C%22transferOutAccountsStatus%22%3Anull%2C%22transaction%22%3A%7B%22id%22%3A%221004368608312180736%22%2C%22status%22%3A1%2C%22createDateTime%22%3Anull%2C%22payDateTime%22%3A1528295111145%2C%22authToken%22%3A%22TGT-4001230-O5ZS0q7FIl2vYtxeLVbVr1LQu2Auh7D4pAjaGsfFg0EAc2oqNa-my.wanfangdata.com.cn%22%2C%22user%22%3A%7B%22accountType%22%3A%22Group%22%2C%22key%22%3A%22hnlgdx%22%7D%2C%22transferIn%22%3A%7B%22accountType%22%3A%22Income%22%2C%22key%22%3A%22PeriodicalFulltext%22%7D%2C%22transferOut%22%3A%7B%22GTimeLimit.hnlgdx%22%3A3.0%7D%2C%22turnover%22%3A3.0%2C%22productDetail%22%3A%22perio_zgtx201803009%22%2C%22productTitle%22%3Anull%2C%22userIP%22%3A%22183.6.159.220%22%2C%22organName%22%3Anull%2C%22memo%22%3Anull%2C%22webTransactionRequest%22%3Anull%2C%22signature%22%3A%22jFHSx941kWx4WEX3sb40p%2B36UW9cduGMuYGPL8yCRS3Gdg0BvqNSKwYJxVTKdMGTRec1pF1an8xM%5CnnIgvniLkT3%2FivH6myLpZ%2BlHCJdj3OxoKIlk3AEQq8%2B4QTDLnfJI5YKW554i2SIyruQpCVCxDBfMS%5CnIh%2Fe8%2BYtbwmuAXcUYwk%3D%22%2C%22delete%22%3Afalse%7D%2C%22isCache%22%3Afalse%7D</span><br></pre></td></tr></table></figure><p>还是挺顺利的，一下子就得到了 <code>downloadliterature.do?</code> 的详细 url。这里解释一下：默认情况下，除了 <code>requests.head()</code> 方法，requests 会自动帮我们处理所有重定向。而 <code>response.url</code> 就会返回初始请求重定向后的最终网址。（<strong>差点忘了说了，我是用的学校网络，所以能免登陆下载。</strong>）</p><p>将得到的网址复制到浏览器中打开，会出现一个网页，再弹出下载对话框。这说明，<code>downloadliterature.do?</code> 并不是文件的最终下载链接，如果是文件的最终下载链接的话，就应该会直接弹出对话框。所以，我们的下一步就是找出<strong>真正的下载链接</strong>。</p><p>观察  <code>downloadliterature.do?</code> 网页：</p><img src="/images/2018/06-07-5.jpg" align="center"><p>这里有个点击下载的地方，通过 F12 以及查看网页源代码，我们可以看到文件的真正下载链接。接着，我们用正则表达式提取该链接，然后就可以用 requests 下载文件了。</p><br>最后，总结一下这一次寻找下载链接的思路：> 1. F12 检查 `下载按钮` 元素，发现，点击后触发的是一个 js 函数 `upload()`。> 2. 在网页源代码中找不到 `upload()` 的实现，转而在网页包含的 js 文件中找。> 3. 找到 `upload()` 后，根据其实现，构造请求 url。> 4. 在浏览器中打开请求 url，发现网页重定向了。用 requests 和 response 获取重定向后的 url> 5. 得到重定向的 url 后，打开，并提取其中包含的文件下载链接]]></content>
    
    
    <summary type="html">&lt;p&gt;今天讲讲用爬虫下载&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;万方数据库文献&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="爬虫" scheme="http://anye137.github.io/categories/爬虫/"/>
    
    
    <category term="爬虫" scheme="http://anye137.github.io/tags/爬虫/"/>
    
    <category term="JS" scheme="http://anye137.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬虫中的多进程，多线程和协程（基础）</title>
    <link href="http://anye137.github.io/2018/crawler-multi-process-thread/"/>
    <id>http://anye137.github.io/2018/crawler-multi-process-thread/</id>
    <published>2018-06-05T16:06:53.000Z</published>
    <updated>2022-04-03T13:22:07.398Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章讲提高爬虫效率的三种方法：</p><blockquote><ol><li>多进程</li><li>多线程</li><li>协程</li></ol></blockquote><p>其实如果要详细讲的话，这三个方法还是挺复杂的，比如说进程间的通信问题，多线程的锁机制问题等。由于本人水平所限，这里就只讲讲这三者的基本用法吧。（虽然如此，掌握了这些基本用法，还是能够显著提升爬虫效率的。）</p><p>首先先总结下多进程、多线程和协程三者的特点：</p><blockquote><p>多进程：</p><p>多线程：</p><p>协程：</p></blockquote><p>下面是代码例子</p><p>多进程</p><p>多线程</p><p>协程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章讲提高爬虫效率的三种方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;多进程&lt;/li&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;li&gt;协程&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实如果要详细讲的话，这三个方法还是挺复杂的，比如说进程间的通信问题，多</summary>
      
    
    
    
    <category term="爬虫" scheme="http://anye137.github.io/categories/爬虫/"/>
    
    
    <category term="爬虫" scheme="http://anye137.github.io/tags/爬虫/"/>
    
    <category term="多进程" scheme="http://anye137.github.io/tags/多进程/"/>
    
    <category term="多线程" scheme="http://anye137.github.io/tags/多线程/"/>
    
    <category term="协程" scheme="http://anye137.github.io/tags/协程/"/>
    
    <category term="Python" scheme="http://anye137.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>爬虫获取 JS 动态数据（漫画图片下载）</title>
    <link href="http://anye137.github.io/2018/crawler-js-selenium/"/>
    <id>http://anye137.github.io/2018/crawler-js-selenium/</id>
    <published>2018-06-03T14:27:26.000Z</published>
    <updated>2022-04-03T13:22:07.398Z</updated>
    
    <content type="html"><![CDATA[<p>爬虫遇到 js 动态数据时，主要解决方法有两种：</p><ol><li>使用一些库，例如 <font color="red">Selenium</font>，来模拟浏览器环境抓取数据。但这样做对内存和 CPU 的消耗都比较大，爬虫效率低，应尽量避免。</li><li><font color="red">手动分析</font> js 请求</li></ol><p>下面我选了一个漫画网站作为小例子，讲一下第二个方法。</p><p><a href="https://manhua.sfacg.com/mh/YSJ/4519/" target="_blank" rel="noopener">https://manhua.sfacg.com/mh/YSJ/4519/</a></p><p><strong>我们的目的是获取漫画图片 url，然后下载下来。</strong></p><a id="more"></a><h1 id="判断待爬数据是否-js-动态加载的"><a href="#判断待爬数据是否-js-动态加载的" class="headerlink" title="判断待爬数据是否 js 动态加载的"></a>判断待爬数据是否 js 动态加载的</h1><p>用 chrome 打开该网页，右键漫画图片 -&gt; 检查</p><img src="/images/2018/06-04-0-comic.jpg" align="center"><p>我们可以看到图片的 url 就在里面。可以右键此处（蓝色部分）-&gt; copy -&gt;  copy xpath 获得图片对应的 xpath，然后可以使用 requests 和 xpath 获取图片 url。当然最后还是失败了。因为这里的图片是 js 动态加载出来的。</p><h1 id="获取跟待爬数据有关的-js-代码信息"><a href="#获取跟待爬数据有关的-js-代码信息" class="headerlink" title="获取跟待爬数据有关的 js 代码信息"></a>获取跟待爬数据有关的 js 代码信息</h1><p>我们可以查看网页源代码，Ctrl+F 定位图片 id “curPic”：</p><img src="/images/2018/06-04-1-comic.jpg" alt="filter" align="center"><p>可以看到，里面根本没有图片的 url，图片是 js 加载的。阅读里面的 js 代码，我们可以知道图片 url 是由下面这行代码决定的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pic2.src = hosts[getHost()] + picAy[curIndex]</span><br></pre></td></tr></table></figure><p>在源码中寻找 <code>hosts</code> 和 <code>picAy</code>，发现它们只在这里出现过。这说明这两个数组可能是由 js 代码加载的。</p><h1 id="寻找跟待爬数据有关的-js-请求"><a href="#寻找跟待爬数据有关的-js-请求" class="headerlink" title="寻找跟待爬数据有关的 js 请求"></a>寻找跟待爬数据有关的 js 请求</h1><p>回到漫画那个页面，我们打开 Chrome 的 F12，点击 network，勾选 js，刷新网页，查看相关 js 请求对应的 preview，看看哪些包含 <code>hosts</code> 和 <code>picAy</code>：</p><img src="/images/2018/06-04-1-comic.jpg" alt="filter" align="center"><p>额，这进展还是出乎意料的顺利，第一个 js 就有我们想要寻找的内容了。我们可以看到，这一话漫画的所有图片都在这个 js 请求的响应内容里了。由此图可知，我们进入某一话漫画的第一页时，就有一份 js 代码请求了这一话漫画所有页的图片 url。那么，我们在写程序的时候，该如何得到这份 js 的文件名？</p><p>观察其他漫画的情况，我们可以发现，虽然这份 js 代码的命名没啥规律，不过在网页源代码中，它一般是处于第一个 js 的位置。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，总结一下如何下载该网站漫画：</p><ol><li>获取一话漫画的第一页 url</li><li>获取该 url 响应的 html</li><li>在 html 中寻找第一个 js 代码文件名</li><li>获取该 js 的响应内容，从中提取所有图片 url</li></ol><p>总结一下该例子中获取 js 动态数据的思路：</p><ol><li>判断是不是 js 加载的数据</li><li>如果是 js 加载的，查看网页源代码中待下载数据附近的 js 代码，获取关键信息（比如一些变量名）</li><li>回到待爬网页那里，按 F12（我用的 Chrome），点击 network，勾选 js，刷新网页，获取 js 请求</li><li>逐个查看每个请求的 preview，看有没有跟待爬取内容相关的信息。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;爬虫遇到 js 动态数据时，主要解决方法有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用一些库，例如 &lt;font color=&quot;red&quot;&gt;Selenium&lt;/font&gt;，来模拟浏览器环境抓取数据。但这样做对内存和 CPU 的消耗都比较大，爬虫效率低，应尽量避免。&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;red&quot;&gt;手动分析&lt;/font&gt; js 请求&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面我选了一个漫画网站作为小例子，讲一下第二个方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://manhua.sfacg.com/mh/YSJ/4519/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://manhua.sfacg.com/mh/YSJ/4519/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们的目的是获取漫画图片 url，然后下载下来。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="爬虫" scheme="http://anye137.github.io/categories/爬虫/"/>
    
    
    <category term="爬虫" scheme="http://anye137.github.io/tags/爬虫/"/>
    
    <category term="JS" scheme="http://anye137.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Spring+SpringMVC+MyBatis 配置总结</title>
    <link href="http://anye137.github.io/2018/configure-ssm/"/>
    <id>http://anye137.github.io/2018/configure-ssm/</id>
    <published>2018-03-01T14:44:07.000Z</published>
    <updated>2022-04-03T13:22:07.397Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要讲 <font color="red">MyBatis 的配置</font>， <font color="red">Spring MVC 的配置</font>，<font color="red">以及 SSM 整合配置</font>。此文章<strong>仅</strong>涉及常用的基本设置。</p><p>本文章是基于我个人的理解和知识水平，通过查阅资料所写下的笔记总结，主要是方便自己记住常用的基本配置。<strong>更详细的知识点请参见文末的参考资料</strong>。</p><br><a id="more"></a><h1 id="MyBatis-配置"><a href="#MyBatis-配置" class="headerlink" title="MyBatis 配置"></a>MyBatis 配置</h1><p>在工程的 src 文件夹下创建 MyBatis 配置文件<code>SqlMapConfig.xml</code></p><p>一个简单例子如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//MyBatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://MyBatis.org/dtd/MyBatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 和spring整合后 environments配置将废除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用jdbc事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接池,由MyBatis管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/databaseName?characterEncoding=utf-8"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/Student.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>各常用便签配置顺序大致如下：</p><ul><li><p>configuration</p><ul><li><p>properties</p></li><li><p>settings</p></li><li><p>typeAliases</p></li><li><p>environments</p><ul><li><p>environment</p><ul><li><p>transactionManager</p></li><li><p>dataSource</p></li></ul></li></ul></li><li><p>mappers</p></li></ul></li></ul><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><p>properties 包含可外部化的，可替换的属性，可以在典型的Java属性文件实例中配置，或通过 properties 元素的子元素传入。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties resource=&quot;org/MyBatis/example/config.properties&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;username&quot; value=&quot;dev_user&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;password&quot; value=&quot;F2Fa3!33TYyg&quot;/&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>然后这些属性可以在整个<code>SqlMapConfig.xml</code> 配置文件中使用。</p><p><strong>注意加载属性的顺序：先读取 properties 元素的子元素定义的属性。然后读取 properties 元素中 resource 加载的属性，它会覆盖已读取的同名属性。</strong></p><p><strong>（一般建议不要在 properties 元素体内定义属性，只将属性定义在 properties 文件中。）</strong></p><p>一个常见的例子是，<font color="red">在 <code>db.properties</code> 中配置 dataSource 参数</font>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver = com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url = jdbc:mysql://localhost:3306/databaseName?characterEncoding=utf-8</span><br><span class="line">jdbc.username = root</span><br><span class="line">jdbc.password = admin</span><br></pre></td></tr></table></figure><p>同时改动 <code>SqlMapConfig.xml</code> 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用jdbc事务管理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池,由MyBatis管理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过这种方式配置，可以<strong>方便对数据库参数的统一管理</strong></p><h2 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h2><p>settings 可以配置 MyBatis 在运行时的行为方式，比如：<strong>开启延迟加载</strong>（默认没有开启），<strong>开启二级缓存</strong>（默认没有开启）等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打开延迟加载 的开关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将积极加载改为消极加载即按需要加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：开启二级缓存除了在 settings 中设置，还需要在别的地方设置，这里不多说</strong></p><h2 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h2><p>typeAliases，指的是<strong>类型别名</strong> 。</p><p>我们在<code>mapper.xml</code> 中给 resultType 或者 parameterType 中指定映射 java 类型时，需要输入类型的全路径。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAuthorById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"domain.blog.Author"</span>&gt;</span></span><br><span class="line">    SELECT * FROM author WHERE id=#&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以使用类型别名，方便开发。在 <code>SqlMapConfig.xml</code> 中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Author"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Author"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Blog"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Blog"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Comment"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Comment"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 这样，我们在<code>mapper.xml</code> 中就可以使用类型别名：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAuthorById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">    SELECT * FROM author WHERE id=#&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们也可以指定包名，MyBatis 会自动扫描包中的 java beans。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"domain.blog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，<code>domian.blog</code> 包中的所有 java bean 的类型别名默认就是类名（首字母大小写都可以）。如果某个类中有<code>@Alias</code> 注解，则类型别名是注解中的值。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"myAuthor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mybatis 中有许多内置的针对常用 java 类的类型别名，常见的有：</p><table><thead><tr><th>别名</th><th>类</th></tr></thead><tbody><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr></tbody></table><h2 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h2><p>environments 内可配置<strong>事务管理</strong>和<strong>数据库连接</strong>，开头已经给出了一个例子，不多说。</p><h2 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h2><p>mappers可配置从哪里加载映射文件，有几种配置方法：</p><p>(1) 通过 resource 加载映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/AuthorMapper.xml"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/BlogMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) 通过 mapper 接口加载映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过mapper接口加载单个 映射文件</span></span><br><span class="line"><span class="comment">       遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录中</span></span><br><span class="line"><span class="comment">       上边规范的前提是：使用的是mapper代理方法</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.anye137.AuthorMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.anye137.BlogMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p> (3) 指定 mapper 接口的包名（推荐）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 批量加载mapper</span></span><br><span class="line"><span class="comment">       指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载</span></span><br><span class="line"><span class="comment">       遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 中</span></span><br><span class="line"><span class="comment">       上边规范的前提是：使用的是mapper代理方法</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.anye137.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下面是一个配置例子。以后要配置的时候从这里粘贴，再进行小小的改动就行了，哈哈哈。</p><p><code>db.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties resource=&quot;org/MyBatis/example/config.properties&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;username&quot; value=&quot;dev_user&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;password&quot; value=&quot;F2Fa3!33TYyg&quot;/&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p><code>SqlMapConfig</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//MyBatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://MyBatis.org/dtd/MyBatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 和spring整合后 environments配置将废除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用jdbc事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接池,由MyBatis管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.anye137.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h1 id="Spring-MVC-配置"><a href="#Spring-MVC-配置" class="headerlink" title="Spring MVC 配置"></a>Spring MVC 配置</h1><p><code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.4"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Spring MVC Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">         org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">      <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>web.xml</code> 文件放在应用程序的 <code>WebContent/WEB-INF</code> 目录下。在初始化 <code>DispatcherServlet</code> 时，Spring MVC 将尝试加载位于该应用程序的 <code>WebContent/WEB-INF</code> 目录中的文件名为 [servlet-name]-servlet.xml 的文件。在上面的例子中，文件名将是<code>springmvc-servlet.xml</code>。</p><p>接下来，<code>url-pattern</code>标签表明哪些 URLs 将被<code>DispatcherServlet</code> 处理。这里所有以 .jsp 结束的 HTTP 请求将由该<code>DispatcherServlet</code>处理。</p><p>如果不想使用默认文件名和默认位置，可以通过在 <code>web.xml</code> 文件中添加 servlet 监听器 <code>ContextLoaderListener</code> 自定义该文件的名称和位置，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- spring mvc的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>springMVC.xml</code> 文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span> </span><br><span class="line">     </span><br><span class="line">   <span class="comment">&lt;!-- 使用注解的处理器映射器和适配器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 指定Controller的包--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.anye137.Controller"</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置jsp路径的前缀--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置jsp路径的后缀--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(1) <code>mvc:annotation-driven</code> 标签默认加载很多的参数绑定方法，包括了默认使用注解的处理器映射器和适配器。</p><p>(2)  <code>context</code> 标签用于启用 Spring MVC 注释扫描功能，该功能允许使用注释，如 <code>@Controller</code> 和 <code>@RequestMapping</code> 等等。</p><p>(3) 上面的视图解析器中配置了 jsp 路径的前后缀。比如说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modelAndView.setViewName(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br></pre></td></tr></table></figure><p>这样，一个名称为 hello 的视图将发送给位于 <code>/WEB-INF/jsp/hello.jsp</code> 中实现的视图。</p><br><h1 id="Spring-Spring-MVC-MyBatis-整合配置"><a href="#Spring-Spring-MVC-MyBatis-整合配置" class="headerlink" title="Spring+Spring MVC+MyBatis 整合配置"></a>Spring+Spring MVC+MyBatis 整合配置</h1><p>终于到重头戏部分了！</p><p>其实以后应该不怎么单独使用 MyBatis 或者 Spring MVC，如果要用框架的话一般会整合几个框架，例如 <font color="red">SSM</font>。 所以下面讲的配置就是本文的重点了。以后写 SSM 项目的话我就可以直接在这里 copy 配置了。嘻嘻！</p><p>这里分三步来整合，即 <font color="red"> 整合 dao 层（这里是mapper）</font>， <font color="red"> 整合 service 层</font> 和 <font color="red">整合 Spring MVC</font>。整合完三部分后，再配置<code>web.xml</code> </p><h2 id="整合-dao-层"><a href="#整合-dao-层" class="headerlink" title="整合 dao 层"></a>整合 dao 层</h2><p>Spring 和 MyBatis 整合，通过 Spring 管理 mapper 接口</p><p>src 文件夹下创建数据库配置文件 <code>db.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver = com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url = jdbc:mysql://localhost:3306/databaseName?characterEncoding=utf-8</span><br><span class="line">jdbc.username = root</span><br><span class="line">jdbc.password = admin</span><br></pre></td></tr></table></figure><p>src 文件夹下创建 mybatis 文件夹，在里面创建 Mybatis 配置文件<code>SqlMapConfig.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全局setting配置，根据需要添加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取数据库自增主键值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 批量扫描别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.anye137.pojo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置environments，这里不需要配置。由Spring管理配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置mapper</span></span><br><span class="line"><span class="comment">    由于使用spring和mybatis的整合包进行mapper扫描，这里不需要配置了。</span></span><br><span class="line"><span class="comment">    必须遵循：mapper.xml和mapper.java文件同名且在一个目录</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，这里跟上面提到的<code>SqlMapConfig.xml</code> 配置有所不同。这里没有配置 <strong>数据源</strong>和 <strong>mapper</strong>。这两个由<code>applicationContext-dao.xml</code>配置。此外，该文件还配置了 SqlSessionFactory。</p><p>src 文件夹下创建 spring 文件夹，在里面创建</p><p><code>applicationContext-dao.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载db.properties文件中的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 ，这里使用dbcp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/SqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- mapper扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.anye137.mapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="整合-service-层"><a href="#整合-service-层" class="headerlink" title="整合 service 层"></a>整合 service 层</h2><p>通过 Spring 管理 service 接口，以及实现事务控制</p><p>src&#x2F;spring 文件夹内创建 <code>applicationContext-service.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.soecode.lyf.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源dataSource在applicationContext-dao.xml中配置了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="整合-Spring-MVC"><a href="#整合-Spring-MVC" class="headerlink" title="整合 Spring MVC"></a>整合 Spring MVC</h2><p>这一步跟上面讲到的 Spring MVC 配置类似。</p><p>src&#x2F;spring 文件夹内创建<code>springMVC.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span> </span><br><span class="line">     </span><br><span class="line">   <span class="comment">&lt;!-- 使用注解的处理器映射器和适配器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 指定Controller的包--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.anye137.Controller"</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置jsp路径的前缀--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置jsp路径的后缀--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置-web-xml"><a href="#配置-web-xml" class="headerlink" title="配置 web.xml"></a>配置 web.xml</h2><p><code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring MVC 配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，SSM 整合大功告成！</p><p><strong>注意所有配置文件的路径，不要搞错了</strong>。</p><br><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>(1) <a href="http://brianway.github.io/2016/03/08/MyBatis-learn-5-configuration/" target="_blank" rel="noopener">MyBatis学习笔记(5)-配置文件</a><br>(2) <a href="http://www.mybatis.org/mybatis-3/configuration.html" target="_blank" rel="noopener">MyBatis Configuration xml</a><br>(3) <a href="https://www.w3cschool.cn/spring_mvc_documentation_linesh_translation/" target="_blank" rel="noopener">Spring MVC 中文文档</a><br>(4) <a href="http://brianway.github.io/tag/#SpringMVC" target="_blank" rel="noopener">Spring MVC 学习笔记</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章主要讲 &lt;font color=&quot;red&quot;&gt;MyBatis 的配置&lt;/font&gt;， &lt;font color=&quot;red&quot;&gt;Spring MVC 的配置&lt;/font&gt;，&lt;font color=&quot;red&quot;&gt;以及 SSM 整合配置&lt;/font&gt;。此文章&lt;strong&gt;仅&lt;/strong&gt;涉及常用的基本设置。&lt;/p&gt;
&lt;p&gt;本文章是基于我个人的理解和知识水平，通过查阅资料所写下的笔记总结，主要是方便自己记住常用的基本配置。&lt;strong&gt;更详细的知识点请参见文末的参考资料&lt;/strong&gt;。&lt;/p&gt;
&lt;br&gt;</summary>
    
    
    
    <category term="java" scheme="http://anye137.github.io/categories/java/"/>
    
    <category term="java web" scheme="http://anye137.github.io/categories/java/java-web/"/>
    
    
    <category term="java web" scheme="http://anye137.github.io/tags/java-web/"/>
    
    <category term="Spring" scheme="http://anye137.github.io/tags/Spring/"/>
    
    <category term="Spring MVC" scheme="http://anye137.github.io/tags/Spring-MVC/"/>
    
    <category term="MyBatis" scheme="http://anye137.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>简单商品管理系统（下）</title>
    <link href="http://anye137.github.io/2018/java-web-product-management-2/"/>
    <id>http://anye137.github.io/2018/java-web-product-management-2/</id>
    <published>2018-02-16T08:35:43.000Z</published>
    <updated>2022-04-03T13:22:07.397Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章实现了对商品信息的增删查改部分，这篇文章讲<font color="red">用户的登录注册</font>部分。其中部分实现原理跟上文类似。</p><h1 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h1><h2 id="数据库建表及插入数据"><a href="#数据库建表及插入数据" class="headerlink" title="数据库建表及插入数据"></a>数据库建表及插入数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">30</span>),</span><br><span class="line">  pwd <span class="built_in">char</span>(<span class="number">30</span>),</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">name</span>,pwd) <span class="keyword">values</span> (<span class="string">'暗夜'</span>,<span class="string">'137'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">name</span>,pwd) <span class="keyword">values</span> (<span class="string">'zero'</span>,<span class="string">'000'</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><br><h2 id="domain-包"><a href="#domain-包" class="headerlink" title="domain 包"></a>domain 包</h2><p>新建 <font color="red">User.java</font>，代码如下（省略了 setter 和 getter 方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="dao-包"><a href="#dao-包" class="headerlink" title="dao 包"></a>dao 包</h2><p>新建 <font color="red">UserDAO 类</font> ，里面有三个方法，一个用于获取数据库连接，一个是根据用户名和密码查找用户（用于登录判断），一个是增加用户（用于注册）。</p><p><font color="red">注意</font>：上一篇文章 dao 中新增商品的函数返回的是 int 值。1代表增加成功，0代表失败。增加商品后随即跳转到<code>listProduct.jsp</code> 。但是，注册（调用<code>addUser()</code> ）成功后，跳转到<code>listProduct.jsp</code> 之前，要<strong>将 user 信息设置到 session 的属性中。所以<code>addUser()</code> 方法返回的是 User 对象，对象不为 null 则表示增加成功</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//封装获取数据库连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;      </span><br><span class="line">        <span class="comment">//代码略，详细代码可见文末的 GitHub 链接</span></span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//增加用户，并返回新增的用户对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(User u)</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preStmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        String sql = <span class="string">"insert into user (name,pwd) values (?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = getConnection();</span><br><span class="line">            <span class="comment">//第二个参数表明支持获取新增数据的id</span></span><br><span class="line">            preStmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">          </span><br><span class="line">            preStmt.setString(<span class="number">1</span>, u.getName());</span><br><span class="line">            preStmt.setString(<span class="number">2</span>, u.getPwd());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> result = preStmt.executeUpdate();</span><br><span class="line">          </span><br><span class="line">            <span class="keyword">if</span>(result==<span class="number">1</span>)&#123;</span><br><span class="line">                rs = preStmt.getGeneratedKeys();</span><br><span class="line">                <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                    <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                    user = <span class="keyword">new</span> User();</span><br><span class="line">                    user.setId(id);</span><br><span class="line">                    user.setName(u.getName());</span><br><span class="line">                    user.setPwd(u.getPwd());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">            <span class="keyword">if</span>(preStmt!=<span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//根据用户名和密码查找用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUser</span><span class="params">(String name,String pwd)</span></span>&#123;</span><br><span class="line">        <span class="comment">//代码略，详细代码可见文末的 GitHub 链接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="service-包"><a href="#service-包" class="headerlink" title="service 包"></a>service 包</h2><p>service 包调用 dao 包中的方法，来<strong>实现业务逻辑</strong>。本项目比较简单，所以这里只是简单地调用 UserDAO 来实现登录和注册功能。</p><p>新建 <font color="red">UserService 类</font>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"><span class="keyword">import</span> dao.UserDAO;</span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDAO udao = <span class="keyword">new</span> UserDAO();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(User u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> udao.addUser(u);        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据用户名和密码查找用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUser</span><span class="params">(String name,String pwd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> udao.findUser(name, pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Servlet-包"><a href="#Servlet-包" class="headerlink" title="Servlet 包"></a>Servlet 包</h2><p>为了方便，我就把登录界面和注册界面写到了同一个文件<code>loginOrRegister.jsp</code> ，里面包含一个登录用的表单，一个注册用的表单，详细代码可见文末的 Github 链接。</p><p>此外，该文件还有一个用于<font color="red">弹出错误对话框</font>的代码片段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123; not empty error&#125;"</span>&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span> language=<span class="string">"javascript"</span>&gt;</span><br><span class="line">        alert(<span class="string">"$&#123; error &#125;"</span>);        </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;%session.removeAttribute(<span class="string">"error"</span>); %&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><p><strong>直接打开登录注册界面时，error 属性是空的（即 null），所以不会弹出错误对话框</strong>。</p><p><strong>登录或者注册时，对应的 servlet 会判断操作是否失败，如果失败了，则在 session 中设置 error 属性，并重定向到 登录注册界面，此时 error 属性非空，就会弹出错误对话框。关闭对话框时，会移除 session 中的 error 属性</strong>。</p><p><font color="red">LoginServlet 类</font> 主要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">import</span> service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/loginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> UserService us = <span class="keyword">new</span> UserService();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        String pwd = request.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据用户名和密码查找用户</span></span><br><span class="line">        User u = us.findUser(name, pwd);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果找不到</span></span><br><span class="line">        <span class="keyword">if</span>(u==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//在request中设置error属性，然后跳转到登录界面，登录界面根据error属性弹出登录失败对话框</span></span><br><span class="line">            request.getSession().setAttribute(<span class="string">"error"</span>, <span class="string">"用户名或者密码错误"</span>);</span><br><span class="line">            response.sendRedirect(<span class="string">"login.jsp"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果找到对应用户</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//设置session的user属性，并跳转到展示商品的界面，商品界面根据user属性会展示登录用户的信息</span></span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>, u);</span><br><span class="line">            response.sendRedirect(<span class="string">"listProduct"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">RegisterServlet 类</font> 主要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">import</span> service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/registerServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">registerServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService us = <span class="keyword">new</span> UserService();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">      </span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        String pwd = request.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">        </span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setName(name);</span><br><span class="line">        u.setPwd(pwd);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注册</span></span><br><span class="line">        u = us.addUser(u);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//如果注册成功</span></span><br><span class="line">        <span class="keyword">if</span>(u!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>, u);</span><br><span class="line">            response.sendRedirect(<span class="string">"listProduct"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"error"</span>, <span class="string">"注册失败"</span>);</span><br><span class="line">            response.sendRedirect(<span class="string">"login.jsp"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，如果登录成功或者注册成功，会设置 session 的 user 属性，然后跳转到 <code>listProduct.jsp</code> 。在<code>listProduct.jsp</code> 中新增用于显示用户信息的代码片段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=<span class="string">'center'</span>&gt;</span><br><span class="line">     &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;not empty user&#125;"</span>&gt;</span><br><span class="line">           你好，$&#123;user.name&#125; &amp;nbsp;</span><br><span class="line">     &lt;/c:if&gt;</span><br><span class="line">  </span><br><span class="line">     &lt;a href="logout"&gt;注销&lt;/a&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>上面代码中还有注销的链接，对应于 <code>LogoutServlet.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/logout"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">        </span><br><span class="line">        request.getSession().removeAttribute(<span class="string">"user"</span>);</span><br><span class="line">        response.sendRedirect(<span class="string">"loginOrRegister.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在用户的登录注册功能已经实现了。</p><p>输入<a href="http://localhost:8080/Management/loginOrRegister.jsp" target="_blank" rel="noopener">http://localhost:8080/Management/loginOrRegister.jsp</a> 即可登录或注册</p><p>至此，一个<strong>简单商品管理系统</strong>已实现完毕。</p><br><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个项目虽小，可是还有一些不足，如下：</p><p>(1) <strong>提交表单信息时，没有先判断是否输入为空</strong></p><p>(2) <strong>提交表单信息后，没有在 servlet 中判断提交信息的合法性，例如填价格时要判断填的是否数字</strong></p><p>(3) <strong>没有禁止相同的商品名和相同的用户名。如果要禁止的话，要新增一些用于判断的代码。</strong></p><p>哈哈，这些功能有空慢慢补上吧。</p><br><p><font size="5"><strong>本文章完整代码见 <a href="https://github.com/anye137/Java-Web-Learning/tree/master/Management" target="_blank" rel="noopener"><font color="blue">Github</font></a></strong></font>。</p><br><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>(1) <a href="http://blog.csdn.net/ithomer/article/details/8033002" target="_blank" rel="noopener">JSP 弹出对话框的方式总结</a> from CSDN</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇文章实现了对商品信息的增删查改部分，这篇文章讲&lt;font color=&quot;red&quot;&gt;用户的登录注册&lt;/font&gt;部分。其中部分实现原理跟上文类似。&lt;/p&gt;
&lt;h1 id=&quot;项目实现&quot;&gt;&lt;a href=&quot;#项目实现&quot; class=&quot;headerlink&quot; title=&quot;项目实现&quot;&gt;&lt;/a&gt;项目实现&lt;/h1&gt;&lt;h2 id=&quot;数据库建表及插入数据&quot;&gt;&lt;a href=&quot;#数据库建表及插入数据&quot; class=&quot;headerlink&quot; title=&quot;数据库建表及插入数据&quot;&gt;&lt;/a&gt;数据库建表及插入数据&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; auto_increment,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pwd &lt;span class=&quot;built_in&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  primary &lt;span class=&quot;keyword&quot;&gt;key&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,pwd) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;暗夜&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;137&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,pwd) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;zero&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="java" scheme="http://anye137.github.io/categories/java/"/>
    
    <category term="java web" scheme="http://anye137.github.io/categories/java/java-web/"/>
    
    
    <category term="java web" scheme="http://anye137.github.io/tags/java-web/"/>
    
    <category term="商品管理系统" scheme="http://anye137.github.io/tags/商品管理系统/"/>
    
  </entry>
  
  <entry>
    <title>简单商品管理系统（上）</title>
    <link href="http://anye137.github.io/2018/java-web-product-management-1/"/>
    <id>http://anye137.github.io/2018/java-web-product-management-1/</id>
    <published>2018-02-14T15:40:04.000Z</published>
    <updated>2022-04-03T13:22:07.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文讲的是，使用 servlet+jsp+jdbc+mysql 实现一个简单的商品管理系统，不使用任何框架，从而加深自己对 java web 基础知识的理解。</p><p>实现的主要功能有：</p><p>(1) <font color="red">对商品信息的增删查改</font></p><p>(2) <font color="red">用户的登录注册功能</font></p><p>本文主要讲<strong>商品信息的增删查改</strong>，下一篇文章讲用户的登录注册。</p><br><a id="more"></a><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>项目目录如下：</p><img src="/images/2018/02-16-1-package.jpg" align="center"><p>本项目使用 <font color="red">MVC 设计模式（Mode-View-Controller）</font> ：</p><ul><li><strong>Controller</strong>：负责转发请求，对请求进行处理。本项目使用 servlet 来实现。</li><li><strong>View</strong>：负责界面展示。本项目使用 jsp 实现。（本项目 jsp 文件位于 WebContent 目录下）</li><li><strong>Model</strong>： 负责操作数据库。本项目 model 包含 domain 包和 dao 包。</li></ul><p>此外，项目中还有一个 <strong>service 包</strong>，负责实现业务逻辑。包与包之间的关系是：</p><p><strong>(1) domain 中的一些类映射数据库中的表，<br>(2) dao 包使用 jdbc 操作数据库，并将结果映射到 domain 中的java bean类，<br>(3) service 包调用 dao 包的方法来实现业务逻辑，<br>(4) servlet 包调用 service 包的方法来处理或者转发请求，以及实现页面的跳转。</strong></p><p>项目具体文件如下：</p><img src="/images/2018/02-16-2-package.jpg" height="400" width="200" align="center"><br><h1 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h1><h2 id="数据库建表及插入数据"><a href="#数据库建表及插入数据" class="headerlink" title="数据库建表及插入数据"></a>数据库建表及插入数据</h2><p>新建数据库 management，设置编码为 <strong>utf-8</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">management</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><p>创建表 product 并插入数据 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">management</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> product;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">30</span>),</span><br><span class="line">  price <span class="built_in">float</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product (<span class="keyword">name</span>,price) <span class="keyword">values</span> (<span class="string">'飞机'</span>,<span class="number">1000.0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product (<span class="keyword">name</span>,price) <span class="keyword">values</span> (<span class="string">'大炮'</span>,<span class="number">500.5</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product (<span class="keyword">name</span>,price) <span class="keyword">values</span> (<span class="string">'子弹'</span>,<span class="number">32.0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product (<span class="keyword">name</span>,price) <span class="keyword">values</span> (<span class="string">'方舟'</span>,<span class="number">700.0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product (<span class="keyword">name</span>,price) <span class="keyword">values</span> (<span class="string">'软件'</span>,<span class="number">980.0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product (<span class="keyword">name</span>,price) <span class="keyword">values</span> (<span class="string">'飞船'</span>,<span class="number">60.0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product (<span class="keyword">name</span>,price) <span class="keyword">values</span> (<span class="string">'神威'</span>,<span class="number">80.6</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product (<span class="keyword">name</span>,price) <span class="keyword">values</span> (<span class="string">'筷子'</span>,<span class="number">78.5</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product (<span class="keyword">name</span>,price) <span class="keyword">values</span> (<span class="string">'篮球'</span>,<span class="number">65.4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product (<span class="keyword">name</span>,price) <span class="keyword">values</span> (<span class="string">'平板'</span>,<span class="number">54.7</span>);</span><br></pre></td></tr></table></figure><br><h2 id="domain-包"><a href="#domain-包" class="headerlink" title="domain 包"></a>domain 包</h2><p>domain 包下新建 <font color="red">Product 类</font>。该类对应于 product 表，类中的三个属性也对应于 product 表的列名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="dao-包"><a href="#dao-包" class="headerlink" title="dao 包"></a>dao 包</h2><p><font color="red">DAO（数据库操作对象，Database Access Object）</font>是 JDBC 下常用的模式，保存数据时它获取 java bean 的属性值，插入 sql 语句中，并保存到数据库中；读取数据时将数据从数据库中读取出来，并将值设置到 java bean 的属性中。</p><p>本项目与数据库直接相关的操作都放在 dao 包中。在此包下新建 <font color="red">ProductDAO</font> 类，类中有对商品信息进行<strong>增删查改</strong>的各个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"><span class="keyword">import</span> domain.Product;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDAO</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对数据库连接进行封装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line">        Connection conn = DriverManager.getConnection(</span><br><span class="line">          <span class="string">"jdbc:mysql://localhost:3306/management?characterEncoding=utf-8"</span>,</span><br><span class="line">          <span class="string">"root"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增加商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addProduct</span><span class="params">(Product p)</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preStmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">        String sql = <span class="string">"insert into product (name,price) values (?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = getConnection();</span><br><span class="line">            </span><br><span class="line">            preStmt = conn.prepareStatement(sql);</span><br><span class="line">            preStmt.setString(<span class="number">1</span>, p.getName());</span><br><span class="line">            preStmt.setFloat(<span class="number">2</span>, p.getPrice());</span><br><span class="line">            </span><br><span class="line">            result = preStmt.executeUpdate();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(preStmt!=<span class="keyword">null</span>)</span><br><span class="line">                preStmt.close();</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">                      </span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//增加成功则返回1，失败则是0</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteProduct</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preStmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">        String sql = <span class="string">"delete from product where id=?"</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = getConnection();</span><br><span class="line">            </span><br><span class="line">            preStmt = conn.prepareStatement(sql);</span><br><span class="line">            preStmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">            </span><br><span class="line">            result = preStmt.executeUpdate();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(preStmt!=<span class="keyword">null</span>)</span><br><span class="line">                preStmt.close();</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">                      </span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除成功则返回1，失败则是0</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateProduct</span><span class="params">(Product p)</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preStmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">        String sql = <span class="string">"update product set name=?,price=? where id=?"</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = getConnection();</span><br><span class="line">            </span><br><span class="line">            preStmt = conn.prepareStatement(sql);</span><br><span class="line">            preStmt.setString(<span class="number">1</span>, p.getName());</span><br><span class="line">            preStmt.setFloat(<span class="number">2</span>, p.getPrice());</span><br><span class="line">            preStmt.setInt(<span class="number">3</span>, p.getId());</span><br><span class="line">            </span><br><span class="line">            result = preStmt.executeUpdate();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(preStmt!=<span class="keyword">null</span>)</span><br><span class="line">                preStmt.close();</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//更新成功则返回1，失败则是0</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//列出所有商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">listProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preStmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        String sql = <span class="string">"select * from product"</span>;</span><br><span class="line">        List&lt;Product&gt; plist=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = getConnection();</span><br><span class="line">            </span><br><span class="line">            preStmt = conn.prepareStatement(sql);</span><br><span class="line">            rs = preStmt.executeQuery();          </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                Product p=<span class="keyword">new</span> Product();</span><br><span class="line">                p.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">                p.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">                p.setPrice(rs.getFloat(<span class="string">"price"</span>));</span><br><span class="line">                plist.add(p);</span><br><span class="line">            &#125;</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">if</span>(preStmt!=<span class="keyword">null</span>)</span><br><span class="line">                preStmt.close();</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">                      </span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回 product list</span></span><br><span class="line">        <span class="keyword">return</span> plist;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据id找到商品，如果找不到则返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findProductById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preStmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        String sql = <span class="string">"select * from product where id=?"</span>;</span><br><span class="line">        Product p=<span class="keyword">new</span> Product();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = getConnection();</span><br><span class="line">            </span><br><span class="line">            preStmt = conn.prepareStatement(sql);</span><br><span class="line">            preStmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">            rs = preStmt.executeQuery();          </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;              </span><br><span class="line">                p.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">                p.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">                p.setPrice(rs.getFloat(<span class="string">"price"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">if</span>(preStmt!=<span class="keyword">null</span>)</span><br><span class="line">                preStmt.close();</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">                      </span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="service-包"><a href="#service-包" class="headerlink" title="service 包"></a>service 包</h2><p>service 包主要负责业务逻辑的实现，本项目比较简单，只实现商品信息的增删查改，所以只是简单调用了 dao 包中的方法。新建 <font color="red">ProductService 类</font>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"><span class="keyword">import</span> domain.Product;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> dao.ProductDAO;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ProductDAO pdao = <span class="keyword">new</span> ProductDAO();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增加商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addProduct</span><span class="params">(Product p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pdao.addProduct(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteProduct</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pdao.deleteProduct(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateProduct</span><span class="params">(Product p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pdao.updateProduct(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//列出所有商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">listProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pdao.listProduct();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据id查找商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findProductById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pdao.findProductById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="servlet-包"><a href="#servlet-包" class="headerlink" title="servlet 包"></a>servlet 包</h2><p>新建 <font color="red">ListProductServlet 类</font>，调用 ProductService 类中的 <code>listProduct()</code> 方法获取 product list ，并将此传递到 <code>listProduct.jsp</code> 界面，来展示所有商品。<code>ListProductServlet.java</code> 主要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/listProduct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListProductServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ProductService ps = <span class="keyword">new</span> ProductService();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">      </span><br><span class="line">        List&lt;Product&gt; plist = ps.listProduct();</span><br><span class="line">        request.setAttribute(<span class="string">"plist"</span>, plist);</span><br><span class="line">        <span class="comment">//跳转到 listProduct.jsp</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"listProduct.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>listProduct.jsp</code> 代码如下（注意编码设置为 <strong>utf-8</strong>）：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span>  uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;table align=<span class="string">'center'</span> border=<span class="string">'1'</span> cellpadding=<span class="string">'4'</span>&gt;</span><br><span class="line">            &lt;tr &gt;</span><br><span class="line">                &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;price&lt;/td&gt;</span><br><span class="line">                &lt;td colspan='2'&gt;操作&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;c:forEach items=<span class="string">"$&#123;plist&#125;"</span> var=<span class="string">"product"</span>&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;product.id &#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;product.name &#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;product.price &#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;a href='deleteProduct?id=$&#123;product.id &#125;'&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;a href='editProduct?id=$&#123;product.id &#125;'&gt;编辑&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/c:forEach&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;form action=<span class="string">"addProduct"</span> method=<span class="string">'post'</span>&gt;</span><br><span class="line">            &lt;table align=<span class="string">'center'</span>&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type='text' name='name' value='$&#123;product.name &#125;'&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;price&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type='text' name='price' value='$&#123;product.price &#125;'&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type='submit' value='增加商品' &gt;&lt;/td&gt; </span><br><span class="line">                &lt;/tr&gt;   </span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>此界面中，还包含删除商品，编辑商品以及增加商品的链接或者按钮。摘取如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;&lt;a href='deleteProduct?id=$&#123;product.id &#125;'&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href='editProduct?id=$&#123;product.id &#125;'&gt;编辑&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">&lt;form action=<span class="string">"addProduct"</span> method=<span class="string">'post'</span>&gt;</span><br></pre></td></tr></table></figure><p>本项目中，是根据商品 id 来删除商品。</p><p> <code>DeleteProductServlet.java</code> 主要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/deleteProduct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteProductServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ProductService ps = <span class="keyword">new</span> ProductService();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">        </span><br><span class="line">        ps.deleteProduct(Integer.parseInt(request.getParameter(<span class="string">"id"</span>)));</span><br><span class="line">        <span class="comment">//删除后跳转到展示商品的界面</span></span><br><span class="line">        response.sendRedirect(<span class="string">"listProduct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>listProduct.jsp</code> 中除了展示所有商品，还包含有用于增加商品的表单，以此提交新增商品的信息，表单中<code>action=&quot;addProduct&quot;</code>  ，即是 <code>AddProductServlet</code>  的 url-pattern</p><p><code>AddProductServlet.java</code> 主要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/addProduct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddProductServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ProductService ps = <span class="keyword">new</span> ProductService();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        </span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        <span class="keyword">float</span> price = Float.parseFloat(request.getParameter(<span class="string">"price"</span>));</span><br><span class="line">       </span><br><span class="line">        Product p = <span class="keyword">new</span> Product();</span><br><span class="line">        p.setName(name);</span><br><span class="line">        p.setPrice(price);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//增加商品</span></span><br><span class="line">        ps.addProduct(p);</span><br><span class="line">        </span><br><span class="line">        response.sendRedirect(<span class="string">"listProduct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑商品信息：在<code>listProduct.jsp</code> 界面中点击<em>“编辑”</em>链接，把商品 id 传递到 <code>EditProductServlet</code> ，<code>EditProductServlet</code> 根据商品 id 查找对应商品的旧信息，然后把旧的信息传递给<code>editProduct.jsp</code> 界面显示出来。接着，在修改界面修改信息后，提交给<code>SaveProductServlet</code> 。最后，在<code>SaveProductServlet</code> 中，调用<code>ProductService</code> 类中的方法更新商品，再跳转到<code>listProduct.jsp</code> 界面。</p><p><code>EditProductServlet.java</code> 主要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/editProduct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditProductServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ProductService ps = <span class="keyword">new</span> ProductService();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> id = Integer.parseInt(request.getParameter(<span class="string">"id"</span>));</span><br><span class="line">        <span class="comment">//根据id查找商品</span></span><br><span class="line">        Product p = ps.findProductById(id);</span><br><span class="line">        </span><br><span class="line">        request.setAttribute(<span class="string">"product"</span>, p);      </span><br><span class="line">        request.getRequestDispatcher(<span class="string">"editProduct.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>editProduct.jsp</code> 主要代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"saveProduct"</span> method=<span class="string">'post'</span>&gt;</span><br><span class="line">    &lt;table align=<span class="string">'center'</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type='text' name='name' value='$&#123;product.name &#125;'&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      </span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;price&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type='text' name='price' value='$&#123;product.price &#125;'&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      </span><br><span class="line">        &lt;tr&gt; </span><br><span class="line">            &lt;td&gt;&lt;input type='submit' value='保存' &gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type='button' value='返回' onclick="location.href='listProduct'"&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      </span><br><span class="line">        &lt;tr&gt; &lt;td&gt;&lt;input type='hidden' name='id' value='$&#123;product.id &#125;'&gt;&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><code>SavaProductServlet.java</code> 主要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/saveProduct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveProductServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ProductService ps = <span class="keyword">new</span> ProductService();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">        </span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//获取editProduct.jsp提交的参数</span></span><br><span class="line">        <span class="keyword">int</span> id = Integer.parseInt(request.getParameter(<span class="string">"id"</span>));</span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        <span class="keyword">float</span> price = Float.parseFloat(request.getParameter(<span class="string">"price"</span>));</span><br><span class="line">        </span><br><span class="line">        Product p = <span class="keyword">new</span> Product();</span><br><span class="line">        p.setId(id);</span><br><span class="line">        p.setName(name);</span><br><span class="line">        p.setPrice(price);</span><br><span class="line">        <span class="comment">//更新商品</span></span><br><span class="line">        ps.updateProduct(p);</span><br><span class="line">        </span><br><span class="line">        response.sendRedirect(<span class="string">"listProduct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，实现商品信息的增删查改相关代码已编写完毕。输入 <a href="http://localhost:8080/Management/listProduct" target="_blank" rel="noopener">http://localhost:8080/Management/listProduct</a> 即可查看商品信息。</p><img src="/images/2018/02-16-3-listProduct.jpg" height="350" width="200" align="center"><br><p>下一篇文章将写用户的登录注册部分</p><br><p><font size="5"><strong>本文章完整代码见 <a href="https://github.com/anye137/Java-Web-Learning/tree/master/Management" target="_blank" rel="noopener"><font color="blue">Github</font></a></strong></font>。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;本文讲的是，使用 servlet+jsp+jdbc+mysql 实现一个简单的商品管理系统，不使用任何框架，从而加深自己对 java web 基础知识的理解。&lt;/p&gt;
&lt;p&gt;实现的主要功能有：&lt;/p&gt;
&lt;p&gt;(1) &lt;font color=&quot;red&quot;&gt;对商品信息的增删查改&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;(2) &lt;font color=&quot;red&quot;&gt;用户的登录注册功能&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;本文主要讲&lt;strong&gt;商品信息的增删查改&lt;/strong&gt;，下一篇文章讲用户的登录注册。&lt;/p&gt;
&lt;br&gt;</summary>
    
    
    
    <category term="java" scheme="http://anye137.github.io/categories/java/"/>
    
    <category term="java web" scheme="http://anye137.github.io/categories/java/java-web/"/>
    
    
    <category term="java web" scheme="http://anye137.github.io/tags/java-web/"/>
    
    <category term="商品管理系统" scheme="http://anye137.github.io/tags/商品管理系统/"/>
    
  </entry>
  
  <entry>
    <title>java web Listener（监听器）</title>
    <link href="http://anye137.github.io/2018/java-web-Listener/"/>
    <id>http://anye137.github.io/2018/java-web-Listener/</id>
    <published>2018-02-09T12:28:26.000Z</published>
    <updated>2022-04-03T13:22:07.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Listener-概述"><a href="#Listener-概述" class="headerlink" title="Listener 概述"></a>Listener 概述</h1><p><font color="red">Listener（监听器）</font>用于<strong>监听 Java Web 程序中的事件</strong>，例如创建、修改、删除 session、request、context 等，<strong>并触发相应的事件</strong>。利用 Listener 能够用很少的代码实现比较好的效果。</p><br><h1 id="Listener-分类"><a href="#Listener-分类" class="headerlink" title="Listener 分类"></a>Listener 分类</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>Servlet 2.5 规范中共有<font color="red">8种 Listener</font>，这8种 Listener 可以分为<strong>三类</strong>：<br><strong>(1) 监听 session、context、request 等的创建与销毁：HttpSessionListener、ServletContextListener、ServletRequestListener。</strong></p><a id="more"></a><ul><li><font color="red">HttpSessionListener</font>:<ul><li><code>void sessionCreated(HttpSessionEvent e)</code></li><li><code>void sessionDestroyed(HttpSessionEvent e)</code></li></ul></li><li><font color="red">ServletContextListener</font>:<ul><li><code>void contextInitialized(ServletContextEvent e)</code> </li><li><code>void contextDestroy(ServletContextEvent e)</code></li></ul></li><li><font color="red">ServletRequestListener</font>:<ul><li><code>void requestInitialized(ServletRequestEvent e)</code></li><li><code>void requestDestroyed(ServletRequestEvent e)</code></li></ul></li></ul><p><strong>(2) 监听 session、context、request 的属性变化：HttpSessionAttributeListener、ServletContextAttributeListener、ServletRequestAttributeListener。</strong></p><ul><li><font color="red">ServletContextAttributeListener</font>:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletContextAttributeEvent e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletContextAttributeEvent e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletContextAttributeEvent e)</span></span></span><br></pre></td></tr></table></figure>  其他两个 Listener 里的方法跟这个类似，不多说。</li></ul><p><strong>(3) 监听 session 内的对象：HttpSessionBindingListener、HTTPSessionActivationListener</strong><br>&lt;1&gt;<font color="red">HttpSessionBindingListener</font>：当对象被放到 session 里时执行<code>valueBound(HttpSessionBindingEvent event)</code> 方法。当对象被从 session 里移除时执行 <code>valueUnbound(HttpSessionBindingEvent event)</code> 方法。<strong>对象必须实现该 Listener 接口</strong>。<br>&lt;2&gt;<font color="red">HttpSessionActivationListener</font>：服务器关闭时，会将 session 里的内容保存到硬盘上，这个过程叫做序列化（钝化）。服务器重新启动时，会将 session 从硬盘重新加载。当 session 里的对象被<strong>序列化（钝化）</strong>时会执行<code>sessionWillPassivate(HttpSessionEvent event)</code> 方法，当对象被<strong>重新加载（反序列化）</strong>时执行<code>sessionDidActivate(HttpSessionEvent event)</code> 。<strong>对象必须实现该 Listener 接口和 Serializable 接口</strong>。</p><p><strong>注意：这两种 Listener 不需要在 web.xml 中配置（当然也不需要注解配置）。</strong>。</p><h2 id="Listener-简单例子1"><a href="#Listener-简单例子1" class="headerlink" title="Listener 简单例子1"></a>Listener 简单例子1</h2><p>监听session、context、request的创建与销毁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anye137.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerTest</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ServletContextListener</span>, <span class="title">ServletRequestListener</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加载servlet上下文时被调用</span></span><br><span class="line">        ServletContext context = e.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">"启动context："</span>+context.getContextPath());</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent e)</span> </span>&#123;</span><br><span class="line">        ServletContext context = e.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">"关闭context："</span>+context.getContextPath());     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建session时被调用</span></span><br><span class="line">        HttpSession session = e.getSession();       </span><br><span class="line">        System.out.println(<span class="string">"创建session，id为："</span>+session.getId());       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//销毁session前被调用</span></span><br><span class="line">        HttpSession session = e.getSession();</span><br><span class="line">        System.out.println(<span class="string">"销毁session，id为："</span>+session.getId());      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建requests时调用</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest)e.getServletRequest();</span><br><span class="line">        String uri = request.getRequestURI();       </span><br><span class="line">        uri = uri+<span class="string">"?"</span>+request.getQueryString();</span><br><span class="line">        request.setAttribute(<span class="string">"dateCreated"</span>, System.currentTimeMillis());</span><br><span class="line">        System.out.println(<span class="string">"IP "</span>+request.getRemoteAddr()+<span class="string">" 请求 "</span>+uri);      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//销毁request时被调用</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest)e.getServletRequest();</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis()-(Long)request.getAttribute(<span class="string">"dateCreated"</span>);    </span><br><span class="line">        System.out.println(<span class="string">"IP "</span>+request.getRemoteAddr()+<span class="string">"请求处理结束，用时"</span>+time+<span class="string">"毫秒"</span>);        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中的 Listener 是用注解配置的，如果用 web.xml 配置，需要添加一下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.anye137.listener.ListenerTest<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Listener-简单例子2"><a href="#Listener-简单例子2" class="headerlink" title="Listener 简单例子2"></a>Listener 简单例子2</h2><p>监听 session 属性变化（监听context、request与监听session类似）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anye137.listener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionAttributeListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionBindingEvent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionAttributeListenerTest</span> <span class="keyword">implements</span> <span class="title">HttpSessionAttributeListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent e)</span>  </span>&#123; </span><br><span class="line">        <span class="comment">//添加属性时被调用</span></span><br><span class="line">        HttpSession session = e.getSession();</span><br><span class="line">        String name = e.getName();</span><br><span class="line">        System.out.println(<span class="string">"新建session属性："</span>+name+<span class="string">"，值为："</span>+e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent e)</span>  </span>&#123; </span><br><span class="line">        <span class="comment">//删除属性前被调用</span></span><br><span class="line">        HttpSession session = e.getSession();</span><br><span class="line">        String name = e.getName();</span><br><span class="line">        System.out.println(<span class="string">"删除session属性："</span>+name+<span class="string">"，值为"</span>+e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent e)</span>  </span>&#123; </span><br><span class="line">        <span class="comment">//修改属性时被调用</span></span><br><span class="line">        HttpSession session = e.getSession();</span><br><span class="line">        String name = e.getName();</span><br><span class="line">        Object oldValue = e.getValue();</span><br><span class="line">        System.out.println(<span class="string">"修改session属性："</span>+name+<span class="string">"，原值："</span>+oldValue+<span class="string">",新值："</span>+session.getAttribute(name));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="Listener-使用案例"><a href="#Listener-使用案例" class="headerlink" title="Listener 使用案例"></a>Listener 使用案例</h1><h2 id="1-单态登录"><a href="#1-单态登录" class="headerlink" title="1.单态登录"></a>1.单态登录</h2><p>单态登录，就是一个账号只能在一台机器上登录，如果在其他机器上登录了，则原来的登录自动失效。这样可以防止多台机器同时使用同一个账号。</p><p>LoginSessionListener.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anye137.listener;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginSessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionAttributeListener</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//储存目前登录的用户,key为userName,value为session</span></span><br><span class="line">    HashMap&lt;String, HttpSession&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//添加session属性时被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent e)</span></span>&#123;        </span><br><span class="line">        <span class="comment">//新添加的属性</span></span><br><span class="line">        String attrName = e.getName();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(attrName.equals(<span class="string">"userName"</span>))&#123;</span><br><span class="line">            String attrValue = (String)e.getValue();</span><br><span class="line">            <span class="comment">//若map中存在该用户</span></span><br><span class="line">            <span class="keyword">if</span>(map.get(attrValue)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//将以前的登录失效</span></span><br><span class="line">                HttpSession session = map.get(attrValue);               </span><br><span class="line">                session.removeAttribute(<span class="string">"userName"</span>);                     </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//新用户session存进map </span></span><br><span class="line">            map.put(attrValue, e.getSession());</span><br><span class="line">            System.out.println(<span class="string">"账号:"</span>+attrValue+<span class="string">",登录"</span>);</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//删除属性前被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent e)</span></span>&#123;</span><br><span class="line">        <span class="comment">//被删除的属性</span></span><br><span class="line">        String attrName = e.getName();       </span><br><span class="line">        <span class="keyword">if</span>(attrName.equals(<span class="string">"userName"</span>))&#123;</span><br><span class="line">            String attrValue = (String) e.getValue();</span><br><span class="line">            map.remove(attrValue);</span><br><span class="line">            System.out.println(<span class="string">"账号："</span>+attrValue+<span class="string">",注销"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//修改属性时被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent e)</span></span>&#123;</span><br><span class="line">        String attrName = e.getName();</span><br><span class="line">        <span class="comment">//没有注销的情况下，用另一个账号登录</span></span><br><span class="line">        <span class="keyword">if</span>(attrName.equals(<span class="string">"userName"</span>))&#123;</span><br><span class="line">            String oldValue = (String) e.getValue();</span><br><span class="line">            String newValue = (String) e.getSession().getAttribute(<span class="string">"userName"</span>);</span><br><span class="line">            <span class="comment">//注意要判断新值旧值是否相等</span></span><br><span class="line">            <span class="keyword">if</span>(!oldValue.equals(newValue))&#123;</span><br><span class="line">                <span class="comment">//检查新登录的账号是否在别的机器上登录过</span></span><br><span class="line">                <span class="keyword">if</span>(map.get(newValue)!=<span class="keyword">null</span>)&#123;                </span><br><span class="line">                    HttpSession session = map.get(oldValue);</span><br><span class="line">                    session.removeAttribute(<span class="string">"userName"</span>);               </span><br><span class="line">                    map.remove(oldValue);</span><br><span class="line">                &#125;              </span><br><span class="line">                map.put(newValue, e.getSession());</span><br><span class="line">                System.out.println(<span class="string">"原账号："</span>+oldValue+<span class="string">"。被新账号："</span>+newValue+<span class="string">"替代"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"账号："</span>+oldValue+<span class="string">",重新登录"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录界面和处理登录的 servlet 跟前面我写过的文章里，登录验证 Filter 里的代码一样，登录后的界面则增加了每隔5s自动刷新以及推出登录的代码</p><p>登录界面<code>login.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/loginServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            姓名：&lt;input type=<span class="string">"text"</span>  name=<span class="string">"userName"</span>/&gt;&lt;br&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>处理登录的servlet <code>loginServlet.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anye137.test;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/loginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;          </span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">"userName"</span>, request.getParameter(<span class="string">"userName"</span>));</span><br><span class="line">        response.sendRedirect(<span class="string">"jsp/afterLogin.jsp"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">        doGet(request, response);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录后的界面<code>afterLogin.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">if</span>(request!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        String action = request.getParameter(<span class="string">"action"</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"logout"</span>.equals(action))&#123;</span><br><span class="line">            out.println(<span class="string">"jjj"</span>);</span><br><span class="line">            session.removeAttribute(<span class="string">"userName"</span>);</span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">"/jsp/login.jsp"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">             &lt;!-- 每<span class="number">5</span>秒刷新一次 --&gt;</span><br><span class="line">             setTimeout(<span class="string">"location=location; "</span>, <span class="number">5000</span>);</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">         用户名： &lt;%= session.getAttribute(<span class="string">"userName"</span>) %&gt;</span><br><span class="line">         您已成功登陆</span><br><span class="line">         &lt;br&gt;</span><br><span class="line">         &lt;a href="$&#123;pageContext.request.requestURI&#125;?action=logout"&gt;退出&lt;/a&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>本例中，Listener 用 map 储存已登录的用户名及对应 session，并<strong>监听 session 中 userName 属性的变化，作出相应的处理来实现单态登录</strong>。</p><p>在实际应用中，我们也可以使用类 User 来储存用户更详细的信息，比如 ip 地址，登录时间等，这时 session 存储的属性值应该是 User 类对象。</p><br><p><font size="5"><strong>本文章完整代码见 <a href="https://github.com/anye137/Java-Web-Learning/tree/master/FilterAndListener" target="_blank" rel="noopener"><font color="blue">Github</font></a></strong></font>。</p><br><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>(1) 《JavaWeb王者归来》</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Listener-概述&quot;&gt;&lt;a href=&quot;#Listener-概述&quot; class=&quot;headerlink&quot; title=&quot;Listener 概述&quot;&gt;&lt;/a&gt;Listener 概述&lt;/h1&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;Listener（监听器）&lt;/font&gt;用于&lt;strong&gt;监听 Java Web 程序中的事件&lt;/strong&gt;，例如创建、修改、删除 session、request、context 等，&lt;strong&gt;并触发相应的事件&lt;/strong&gt;。利用 Listener 能够用很少的代码实现比较好的效果。&lt;/p&gt;
&lt;br&gt;

&lt;h1 id=&quot;Listener-分类&quot;&gt;&lt;a href=&quot;#Listener-分类&quot; class=&quot;headerlink&quot; title=&quot;Listener 分类&quot;&gt;&lt;/a&gt;Listener 分类&lt;/h1&gt;&lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;p&gt;Servlet 2.5 规范中共有&lt;font color=&quot;red&quot;&gt;8种 Listener&lt;/font&gt;，这8种 Listener 可以分为&lt;strong&gt;三类&lt;/strong&gt;：&lt;br&gt;&lt;strong&gt;(1) 监听 session、context、request 等的创建与销毁：HttpSessionListener、ServletContextListener、ServletRequestListener。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://anye137.github.io/categories/java/"/>
    
    <category term="java web" scheme="http://anye137.github.io/categories/java/java-web/"/>
    
    
    <category term="java" scheme="http://anye137.github.io/tags/java/"/>
    
    <category term="java web" scheme="http://anye137.github.io/tags/java-web/"/>
    
    <category term="Listener" scheme="http://anye137.github.io/tags/Listener/"/>
    
  </entry>
  
  <entry>
    <title>java web Filter（过滤器）下</title>
    <link href="http://anye137.github.io/2018/java-web-filter-2/"/>
    <id>http://anye137.github.io/2018/java-web-filter-2/</id>
    <published>2018-02-08T14:43:03.000Z</published>
    <updated>2022-04-03T13:22:07.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Filter-常用例子"><a href="#Filter-常用例子" class="headerlink" title="Filter 常用例子"></a>Filter 常用例子</h1><h2 id="3-登录验证-Filter"><a href="#3-登录验证-Filter" class="headerlink" title="3. 登录验证 Filter"></a>3. 登录验证 Filter</h2><p>我们在浏览网站的时候，有时候是没有登录的，或者因为登录很久后自动掉出来。可能有一些请求需要<font color="red">判断用户是否处于登录状态</font> ，以及该用户的权限。Java Web 程序一般使用 <strong>session</strong> 或者 <strong>cookie</strong> 来记录用户是否登录。<strong>登录验证 Filter</strong> 是将 request 提交给 servlet 之前，对 session 或者 cookie 进行校验。如果没有相应的登录信息，或者权限不够，则进行相应的处理，比如跳转到登录界面。</p><p>下面的例子中，我们仅判断用户是否处于登录状态。</p><a id="more"></a><p>PrivilegeFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anye137.filter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName=<span class="string">"privilegeFilter"</span>,urlPatterns=<span class="string">"/jsp/afterLogin.jsp"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException</span>&#123;</span><br><span class="line">        </span><br><span class="line">        HttpServletRequest req = (HttpServletRequest)request;</span><br><span class="line">        HttpServletResponse res = (HttpServletResponse)response;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        </span><br><span class="line">        String name = (String) session.getAttribute(<span class="string">"userName"</span>);</span><br><span class="line">        <span class="keyword">if</span>(name==<span class="keyword">null</span> || name.trim().equals(<span class="string">""</span>))</span><br><span class="line">            res.sendRedirect(req.getContextPath()+<span class="string">"/jsp/login.jsp"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            chain.doFilter(req, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>登录界面 <code>login.jsp</code> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/loginServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            姓名：&lt;input type=<span class="string">"text"</span>  name=<span class="string">"name"</span>/&gt;&lt;br&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>处理登录的 servlet <code>LoginServlet.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anye137.test;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/loginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">        </span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">"userName"</span>, request.getParameter(<span class="string">"userName"</span>));</span><br><span class="line">        response.sendRedirect(<span class="string">"jsp/afterLogin.jsp"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">        doGet(request, response);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录后的界面<code>afterLogin.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">       &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        用户名： &lt;%= session.getAttribute(<span class="string">"name"</span>) %&gt;</span><br><span class="line">        您已成功登陆</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>运行效果：通过<code>login.jsp</code> 页面可以登录进入 <code>afterLogin.jsp</code> 页面，如果没有登录直接输入<code>afterLogin.jsp</code> 的网址，则会跳转到登录界面。</p><p>注意，上面代码中并没有设置 request 和 response 编码，因为我在上一篇文章中已经写好了 <code>CharacterEncodingFilter</code> 。当然，如果不想用字符编码 Filter，我们也可以在 servlet 中简单设置下编码。</p><br><h2 id="4-内容替换-Filter"><a href="#4-内容替换-Filter" class="headerlink" title="4.内容替换 Filter"></a>4.内容替换 Filter</h2><p>有时候需要对网站的内容进行控制，<strong>防止输出非法内容或者敏感内容</strong>。常规的解决办法是在保存进数据库之前对非法敏感内容进行替环，或者在 servlet 里输出到客户端时进行替环。这两种解决方案都有很大的局限性，例如每个 servlet 都要进行替换、工作量大，与业务耦合比较严重等。</p><p>使用<font color="red">内容替换 Filter</font> 则方便得多，其工作原理是：<strong>在 servlet 内将内容输出到 response 时，response 将内容缓存起来，在 Filter 中进行替换，然后再输出到客户端浏览器。由于默认的 response 并不能严格地缓存输出内容，因此需要自定义一个具备缓存功能的 response</strong>。</p><p>OutputReplaceFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anye137.filter;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponseWrapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(</span><br><span class="line">    filterName=<span class="string">"outputReplaceFilter"</span>, </span><br><span class="line">    urlPatterns=<span class="string">"/*"</span>,</span><br><span class="line">    initParams=&#123;<span class="meta">@WebInitParam</span>(name=<span class="string">"file"</span>,value=<span class="string">"/WEB-INF/sensitive.properties"</span>)&#125;  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputReplaceFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//非法词、敏感词配置在 properties文件中</span></span><br><span class="line">    <span class="keyword">private</span> Properties pp = <span class="keyword">new</span> Properties();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutputReplaceFilter</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//properties文件名</span></span><br><span class="line">        String file = config.getInitParameter(<span class="string">"file"</span>);</span><br><span class="line">        <span class="comment">//文件位置</span></span><br><span class="line">        String realPath = config.getServletContext().getRealPath(file);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//如果properties文件是ISO-8859-1编码，可以直接用这句：pp.load(new FileInputStream(realPath));</span></span><br><span class="line">            <span class="comment">//如果文件是utf-8编码，且包含中文，需用下面两句</span></span><br><span class="line">            BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(realPath));    </span><br><span class="line">            pp.load(<span class="keyword">new</span> InputStreamReader(in, <span class="string">"utf-8"</span>));                       </span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"replace"</span>);</span><br><span class="line">    HttpServletResponse res = (HttpServletResponse)response;</span><br><span class="line">    <span class="comment">//使用自定义response</span></span><br><span class="line">    OutputReplaceResponse orr = <span class="keyword">new</span> OutputReplaceResponse(res);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//doFilter，使用自定义 response orr</span></span><br><span class="line">    chain.doFilter(request, orr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//得到response输出内容</span></span><br><span class="line">    String output = orr.getCharArrayWriter().toString();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历所有敏感词</span></span><br><span class="line">    <span class="keyword">for</span>(Object obj: pp.keySet())&#123;</span><br><span class="line">        String key = (String)obj;</span><br><span class="line">        <span class="comment">//替换敏感词</span></span><br><span class="line">        output = output.replace(key, pp.getProperty(key));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过原来的response的getWriter()方法输出</span></span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">//真正输出到客户端</span></span><br><span class="line">    out.write(output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义response类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputReplaceResponse</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span></span>&#123;                <span class="comment">//字符数组Writer </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的<code>response</code> 类<code>OutputReplaceResponse</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputReplaceResponse</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//字符数组Writer</span></span><br><span class="line">    <span class="keyword">private</span> CharArrayWriter caw=<span class="keyword">new</span> CharArrayWriter();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OutputReplaceResponse</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(response);          </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">            <span class="comment">//返回字符数组Writer，缓存内容</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PrintWriter(caw);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> CharArrayWriter <span class="title">getCharArrayWriter</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> caw;</span><br><span class="line">        &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例中，自定义的 response 只是一个<strong>“伪装”</strong>的 response。servlet会通过它输出内容到客户端，但是<font color="red">它内部只是将内容缓存起来了，并没有真正输出到客户端。最终输出到客户端还是通过原来的 response 完成的</font>。</p><p>词库配置 <code>sensitive.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 自动更正</span><br><span class="line">Chna = China</span><br><span class="line"># 自动替换</span><br><span class="line">赌博 = **</span><br><span class="line">色情 = **</span><br><span class="line">情色 = **</span><br></pre></td></tr></table></figure><p>我把 properties 文件设置为 utf-8 编码的 （eclipse中右键文件名，点Properties 设置就行了），在上面的 Filter 中是这样加载的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(realPath));    </span><br><span class="line">pp.load(<span class="keyword">new</span> InputStreamReader(in, <span class="string">"utf-8"</span>));</span><br></pre></td></tr></table></figure><p>使用 <strong>utf-8</strong> 编码的话，在 properties 文件中直接输入中文会正常显示。<br>如果把文件编码设置为 <strong>ISO-8859-1</strong>，这时在编辑器输入中文，只能显示出中文对应的 Unicode 编码，但是对后续的操作其实影响不大。加载此文件只需一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pp.load(<span class="keyword">new</span> FileInputStream(realPath));</span><br></pre></td></tr></table></figure><br>测试页面`testReplace.jsp`<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        Chna &lt;br/&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        色情 &lt;br/&gt;</span><br><span class="line">        赌博 &lt;br/&gt;</span><br><span class="line">        情色 &lt;br/&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中输入测试页面网址，可以看到替换后的效果。</p><p>上面 Filter 是在<code>init()</code> 方法中加载 properties 文件的，Filter <code>inti()</code> 方法只在 web 程序第一次运行时调用一次。所以如果词库更新的话，需要<strong>重启</strong> web 程序。</p><p>Filter 还有许多常用例子，例如<strong>缓存Filter</strong>、<strong>GZIP压缩Filter</strong>等，这里就不一一详述了。</p><br><p>本文详细代码见 <a href="https://github.com/anye137/Java-Web-Learning/tree/master/FilterAndListener" target="_blank" rel="noopener"><font color="blue"><strong>Github</strong></font></a></p><br><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>(1) 《JavaWeb 王者归来》<br>(2) <a href="http://blog.csdn.net/qq_27093465/article/details/70765870" target="_blank" rel="noopener">Java读写.properties文件实例，解决中文乱码问题</a> from CSDN</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Filter-常用例子&quot;&gt;&lt;a href=&quot;#Filter-常用例子&quot; class=&quot;headerlink&quot; title=&quot;Filter 常用例子&quot;&gt;&lt;/a&gt;Filter 常用例子&lt;/h1&gt;&lt;h2 id=&quot;3-登录验证-Filter&quot;&gt;&lt;a href=&quot;#3-登录验证-Filter&quot; class=&quot;headerlink&quot; title=&quot;3. 登录验证 Filter&quot;&gt;&lt;/a&gt;3. 登录验证 Filter&lt;/h2&gt;&lt;p&gt;我们在浏览网站的时候，有时候是没有登录的，或者因为登录很久后自动掉出来。可能有一些请求需要&lt;font color=&quot;red&quot;&gt;判断用户是否处于登录状态&lt;/font&gt; ，以及该用户的权限。Java Web 程序一般使用 &lt;strong&gt;session&lt;/strong&gt; 或者 &lt;strong&gt;cookie&lt;/strong&gt; 来记录用户是否登录。&lt;strong&gt;登录验证 Filter&lt;/strong&gt; 是将 request 提交给 servlet 之前，对 session 或者 cookie 进行校验。如果没有相应的登录信息，或者权限不够，则进行相应的处理，比如跳转到登录界面。&lt;/p&gt;
&lt;p&gt;下面的例子中，我们仅判断用户是否处于登录状态。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://anye137.github.io/categories/java/"/>
    
    <category term="java web" scheme="http://anye137.github.io/categories/java/java-web/"/>
    
    
    <category term="java" scheme="http://anye137.github.io/tags/java/"/>
    
    <category term="java web" scheme="http://anye137.github.io/tags/java-web/"/>
    
    <category term="Filter" scheme="http://anye137.github.io/tags/Filter/"/>
    
  </entry>
  
  <entry>
    <title>java web Filter（过滤器）上</title>
    <link href="http://anye137.github.io/2018/java-web-filter-1/"/>
    <id>http://anye137.github.io/2018/java-web-filter-1/</id>
    <published>2018-02-06T08:34:51.000Z</published>
    <updated>2022-04-03T13:22:07.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Filter-概述"><a href="#Filter-概述" class="headerlink" title="Filter 概述"></a>Filter 概述</h1><p><font color="red">Filter（过滤器）</font>用于在 servlet 之外对 request 或者 response 进行拦截、修改，甚至可以拒绝、重定向或者转发 request。Filter 提出了 <font color="red">FilterChain</font> 的概念，一个 FilterChain 包括多个 Filter。客户端请求 request 在抵达 servlet 之前会经过 FilterChain 里的所有 Filter，服务器响应 response 在从 servlet 抵达客户端浏览器之前也会经过 FilterChain 里的所有Filter。Filter处理过程如图所示：</p><a id="more"></a><img src="/images/2018/filter.jpg" width="300" height="200" alt="filter" align="center"><br><h1 id="Filter-接口"><a href="#Filter-接口" class="headerlink" title="Filter 接口"></a>Filter 接口</h1><p>一个 Filter 必须实现 <code>javax.servlet.Filter</code> 接口。Filter 接口有<strong>三个方法</strong>，源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Filter.java</span></span><br><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * web程序启动时调用此方法，用于初始化该Filter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config 可以从该参数中获取初始化参数以及ServletContext信息等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端请求服务器时会经过</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request,ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * web程序关闭时调用此方法，用于销毁一些资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>init()</code> 与<code>destroy()</code> 方法只会分别在 web 程序加载和卸载的时候调用。而<code>doFilter()</code> 方法每次有客户端请求时都会被调用一次。</p><p>一个简单的<code>doFilter()</code> 方法例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                     FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"request 被处理之前... "</span>);</span><br><span class="line">    <span class="comment">//一定要执行这句</span></span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">    System.out.println(<span class="string">"request 被处理之后，response 抵达客户端之前... "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>chain.doFilter(request, response)</code> <font color="red">将 request 递交给 FilterChain 中的下一个 Filter，如果所有的 Filter 都执行完了则交给 servlet 处理</font>。</p><br><h1 id="Filter-配置"><a href="#Filter-配置" class="headerlink" title="Filter 配置"></a>Filter 配置</h1><h2 id="在-web-xml-中配置"><a href="#在-web-xml-中配置" class="headerlink" title="在 web.xml 中配置"></a>在 web.xml 中配置</h2><p>一个例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterName<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.anye137.SomeFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>paramName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>paramValue<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterName<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>someServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>FORWARD<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个 Filter 需要配置<code>&lt;filter&gt;</code> 和<code>&lt;filter-mapping&gt;</code> 标签</p><p><code>&lt;filter&gt;</code> 标签需要配置<code>&lt;filter-name&gt;</code> 和<code>&lt;filter-class&gt;</code> 以及0或多个<code>&lt;init-param&gt;</code> （初始化参数）</p><p><code>&lt;filter-mapping&gt;</code> 配置 Filter 的拦截规则</p><ul><li><code>&lt;url-pattern&gt;</code> 配置 URL 映射，可以配置多个。在上面的例子中，如果一个请求访问的 URL 结尾是 .do 或者是 .jsp，就可以匹配此 Filter。通过使用<code>&lt;url-pattern&gt;</code> ，我们不仅可以拦截 servlet 的请求，还可以拦截其他资源，例如图片、css 文件等</li><li><code>&lt;servlet-name&gt;</code> 配置 servlet 名称映射，即对应的 servlet 会被Filter 拦截，可以配置多个。有时候，许多 URL 会映射到同一个 servlet，这时候使用<code>&lt;servlet-name&gt;</code> 相较于<code>&lt;url-pattern&gt;</code> 比较方便</li><li><code>&lt;dispatcher&gt;</code> 配置派发请求的方式，可以配置多个。如果没有配置任何dispatcher，则默认为 REQUEST。<code>&lt;dispatcher&gt;</code> 取值有：<ol><li><strong>REQUEST</strong>：直接请求，例如直接访问 URL。</li><li><strong>FORWARD</strong>：当调用<code>RequestDispatcher</code> 的<code>forward</code> 方法或者使用<code>&lt;jsp: forward&gt;</code> 标签时，将触发这些请求</li><li><strong>INCLUDE</strong>：当调用<code>RequestDispatcher</code> 的<code>include</code> 方法或者使用<code>&lt;jsp: include&gt;</code> 标签时，将触发这些请求（记住它与<code>&lt;%@ include %&gt;</code> 是不同的）</li><li><strong>ERROR</strong>：访问处理 http 错误（如404 Not Found等）的错误页面的请求</li><li><strong>ASYNC</strong>：（这个我也不太懂，不多说。。。）</li></ol></li></ul><p>一个 web 程序可以配置多个 Filter，<font color="red">如何比较两个Filter 执行顺序</font>：<br>(1) 首先，URL 映射优先级高于 servlet 名称映射，不管其在 web.xml 中配置的顺序如何<br>(2) 其次，如果同为 URL 映射或者同为 servlet 名称映射，则比较<code>&lt;servlet-mapping&gt;</code> 在 web.xml 中出现的顺序</p><h2 id="使用注解配置"><a href="#使用注解配置" class="headerlink" title="使用注解配置"></a>使用注解配置</h2><p>Filter 也可以使用注解配置，下面配置跟上面是等价的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="meta">@WebFilter</span>(</span><br><span class="line">    filterName = <span class="string">"myFilter"</span>,</span><br><span class="line">    urlPattern = &#123;<span class="string">"*.do"</span>, <span class="string">"*.jsp"</span>&#125;,</span><br><span class="line">    servletName = &#123;<span class="string">"someServlet"</span>&#125;,</span><br><span class="line">    dispatcherTypes = &#123;DispatcherType.REQUEST, DispatcherType.FORWARD&#125;</span><br><span class="line">    initParams = &#123;</span><br><span class="line">        <span class="meta">@WebInitParam</span>(name = <span class="string">"paramName"</span>, value = <span class="string">"paramValue"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用注解配置的主要<font color="red">缺点</font>是，<strong>不能对 FilterChain 上的 Filter 进行排序</strong>。</p><br><h1 id="Filter-常用例子"><a href="#Filter-常用例子" class="headerlink" title="Filter 常用例子"></a>Filter 常用例子</h1><p>我们可以通过在<code>doFilter()</code> 方法内编写代码，达到以下目的：<br>(1) 通过控制是否调用 <code>chain.doFilter()</code> ，来决定是否访问目标资源。例如：防盗链 Filter、权限验证 Filter。<br>(2) 调用 <code>chain.doFilter()</code> 之前，做某些处理。例如：字符编码 Filter。<br>(3) 调用 <code>chain.dpFilter()</code> 之后，做某些处理。例如：内容替换 Filter，GZIP压缩 Filter<br>（当然，我们也可以综合使用上面三种方式）</p><p>下面介绍下一些例子。</p><h2 id="1-防盗链-Filter"><a href="#1-防盗链-Filter" class="headerlink" title="1. 防盗链 Filter"></a>1. 防盗链 Filter</h2><p>实现效果：如果其他的网站引用本网站的图片等资源，将会显示一个错误图片，只有本站内的网页引用时，图片才会正常显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anye137.filter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AntiStealingLinkFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AntiStealingLinkFilter</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest req=(HttpServletRequest)request;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//请求来源网址</span></span><br><span class="line">        String referer=req.getHeader(<span class="string">"referer"</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//如果请求不是来自本站</span></span><br><span class="line">        <span class="keyword">if</span>(referer==<span class="keyword">null</span>||!referer.contains(req.getServerName()))&#123;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">"/error.jpg"</span>).forward(req, response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;  <span class="comment">//如果来自本站</span></span><br><span class="line">            chain.doFilter(req, response);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>doFilter()</code> 方法中，<strong>首先要将 <code>request</code> 转为 <code>HttpServletRequest</code> 类的对象 req</strong>。只有这样，才能使用一些针对 http 协议的方法，例如 <code>String getMethod()</code> 、<code>String getHeader(String name)</code> 、<code>HttpSession getSession()</code> 等。</p><p>在 web.xml 中配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>antiStealingLinkFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.anye137.filter.AntiStealingLinkFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>antiStealingLinkFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/images/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在此配置下，从别的网站请求 <strong>WebContent&#x2F;images</strong> 文件夹下的资源，或者<strong>直接输入资源 URL</strong> 就只会显示我们之前在 Filter 类中设置好的 error.jpg。本站访问，则正常显示。</p><br><h2 id="2-字符编码-Filter"><a href="#2-字符编码-Filter" class="headerlink" title="2.字符编码 Filter"></a>2.字符编码 Filter</h2><p>字符编码 Filter 是最常用的 Filter 之一，常用来解决 Tomcat 等服务器里 request，response 乱码的问题。本例中我们使用 Filter 来解决<strong>全站中文乱码</strong>问题。</p><p><font color="red">对 response 的设置：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br></pre></td></tr></table></figure><p>其中，<code>setCharacterEncoding</code> 用于解决<code>response.getWriter()</code> 输出字符流的乱码问题，其作用是将 response 中的数据解码后发向浏览器。<code>setContentType</code> 用于设置浏览器用我们指定的方式解码，然后呈现出来。</p><p><font color="red">对 request 的设置：</font><br>(1) 若是 <strong>POST</strong> 方式，直接设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>); `</span><br></pre></td></tr></table></figure><p>(2) 若是 <strong>GET</strong> 方式，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paramValue = request.getParameter(paramName)</span><br><span class="line">paramValue = <span class="keyword">new</span> String(paramValue.getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure><p>如果对每个 Servlet 都编写上面的代码，则会显得冗赘。使用 Filter 只需一次编写，就能解决全站编码问题。同时，为了实现对 POST 和 GET 方式的分开处理，我们后面实现了<strong>自定义的 Request 类：EncodingRequest.java</strong></p><p>Filter 代码： CharacterEncodingFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anye137.filter;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否启用该Filter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化时从 web.xml中加载参数</span></span><br><span class="line">        enabled = config.getInitParameter(<span class="string">"enabled"</span>).trim().equalsIgnoreCase(<span class="string">"true"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//如果启用了Filter</span></span><br><span class="line">        <span class="keyword">if</span>(enabled)&#123;</span><br><span class="line">             <span class="comment">//设置response编码</span></span><br><span class="line">             response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">             response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">             <span class="comment">//设置request编码</span></span><br><span class="line">             HttpServletRequest req=(HttpServletRequest)request;  </span><br><span class="line">             EncodingRequest er=<span class="keyword">new</span> EncodingRequest(req);</span><br><span class="line"></span><br><span class="line">             chain.doFilter(er, response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EncodingRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span></span>&#123;            </span><br><span class="line">        <span class="comment">//代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>CharacterEncodingFilter</code> 类中，先获取初始化参数<code>enabled</code> 判断是否开启该 Filter，如果开启，则先设置 response 编码，然后设置 request 编码。我们使用自定义的<code>EncodingRequest</code> 内部类来实现对<code>request</code> 字符编码的设置（<strong>注意区分 GET 和 POST 处理方式的不同</strong>）。</p><p>内部类<code>EncodingRequest</code> 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest req;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EncodingRequest</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        <span class="keyword">this</span>.req = request;</span><br><span class="line">        <span class="keyword">if</span>(req.getMethod().equalsIgnoreCase(<span class="string">"POST"</span>))&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        String value = <span class="keyword">null</span>;        </span><br><span class="line">        <span class="keyword">if</span>(req!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            value = req.getParameter(name);</span><br><span class="line">            <span class="keyword">if</span>(req.getMethod().equalsIgnoreCase(<span class="string">"GET"</span>))&#123;</span><br><span class="line">                value = req.getParameter(name);</span><br><span class="line">                <span class="keyword">if</span>(value!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        value = <span class="keyword">new</span> String(value.getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(UnsupportedEncodingException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;           </span><br><span class="line">        <span class="keyword">return</span> value;               </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Filter 在 web.xml 中配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.anye137.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>enabled<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试页面 <code>testEncoding.jsp</code> :</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt; </span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;post提交&lt;/h1&gt;</span><br><span class="line">        &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/testEncoding"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        姓名：&lt;input type=<span class="string">"text"</span>  name=<span class="string">"name"</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">      </span><br><span class="line">        &lt;h1&gt;get提交&lt;/h1&gt;</span><br><span class="line">        &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/testEncoding"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">            姓名：&lt;input type=<span class="string">"text"</span>  name=<span class="string">"name"</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;&lt;br&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>处理提交参数的 <code>testEncoding.java</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anye137.test;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/testEncoding"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEncoding</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      <span class="comment">//输出信息，测试是否乱码</span></span><br><span class="line">        response.getWriter().write(<span class="string">"Hello, 测试乱码！输入姓名为： "</span>+request.getParameter(<span class="string">"name"</span>));                 </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;  </span><br><span class="line">        doGet(request, response);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入<code>testEncoding.jsp</code> 所在网址，填写信息提交后，将由 <code>TestEncoding</code> servlet 来处理提交的信息。该 servlet 会输出一条信息，以此判断是否乱码。至此，我们已经完成了 CharacterEncodingFilter 的编写及测试。</p><p><strong>根据从网上查阅的资料，对 POST 方式和 GET 方式的编码处理是不一样的，我上面的代码也是这样。然而，我在测试的时候发现，把 GET 方式的编码处理方法应用于 POST 方式，也是行得通的，这样代码更简洁点。所以，为什么网上的资料是分开处理的呢？处理字符编码的代码的原理又是啥？这个以后有时间研究下</strong>。</p><br><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color="red"><strong>Filter（过滤器）是一个很有弹性的机制，功能很强大，而且与servlet、jsp等没有任何的耦合，可自由拆卸。<br>如果配置了多个 Filter，则执行会有先有后，彼此之间还可能会相互影响，要注意正确配置 Filter 的顺序</strong></font>。</p><p>下篇博客将继续写 Filter 使用案例。</p><p>**本文章完整代码见 <a href="https://github.com/anye137/Java-Web-Learning/tree/master/FilterAndListener" target="_blank" rel="noopener"><font color="blue">Github</font></a>**。</p><br><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>(1) 《Java Web 王者归来》<br>(2) 《Java Web 高级编程》<br>(3)  <a href="http://blog.csdn.net/nokiaisacat/article/details/51326914" target="_blank" rel="noopener">servlet Filter </a> from CSDN<br>(4) <a href="http://blog.csdn.net/xiazdong/article/details/7217022" target="_blank" rel="noopener">Servlet 中文乱码问题及解决方案剖析</a> from CSDN<br>(5) <a href="https://github.com/codingXiaxw/filter" target="_blank" rel="noopener">解决全站字符乱码问题</a>  from GitHub</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Filter-概述&quot;&gt;&lt;a href=&quot;#Filter-概述&quot; class=&quot;headerlink&quot; title=&quot;Filter 概述&quot;&gt;&lt;/a&gt;Filter 概述&lt;/h1&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;Filter（过滤器）&lt;/font&gt;用于在 servlet 之外对 request 或者 response 进行拦截、修改，甚至可以拒绝、重定向或者转发 request。Filter 提出了 &lt;font color=&quot;red&quot;&gt;FilterChain&lt;/font&gt; 的概念，一个 FilterChain 包括多个 Filter。客户端请求 request 在抵达 servlet 之前会经过 FilterChain 里的所有 Filter，服务器响应 response 在从 servlet 抵达客户端浏览器之前也会经过 FilterChain 里的所有Filter。Filter处理过程如图所示：&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://anye137.github.io/categories/java/"/>
    
    <category term="java web" scheme="http://anye137.github.io/categories/java/java-web/"/>
    
    
    <category term="java" scheme="http://anye137.github.io/tags/java/"/>
    
    <category term="java web" scheme="http://anye137.github.io/tags/java-web/"/>
    
    <category term="Filter" scheme="http://anye137.github.io/tags/Filter/"/>
    
    <category term="防盗链" scheme="http://anye137.github.io/tags/防盗链/"/>
    
    <category term="字符编码" scheme="http://anye137.github.io/tags/字符编码/"/>
    
  </entry>
  
  <entry>
    <title>java集合框架常用知识点总结</title>
    <link href="http://anye137.github.io/2018/java-Collections-Map/"/>
    <id>http://anye137.github.io/2018/java-Collections-Map/</id>
    <published>2018-02-02T01:58:53.000Z</published>
    <updated>2022-04-03T13:22:07.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; a=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//add()函数</span></span><br><span class="line">a.add(<span class="string">"a"</span>);     <span class="comment">//[a]</span></span><br><span class="line">a.add(<span class="string">"b"</span>);<span class="comment">//[a, b]</span></span><br><span class="line">a.add(<span class="string">"c"</span>);<span class="comment">//[a, b, c]</span></span><br><span class="line">a.add(<span class="number">1</span>, <span class="string">"d"</span>);<span class="comment">//[a, d, b, c]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//contains()</span></span><br><span class="line"><span class="keyword">boolean</span> b=a.contains(<span class="string">"f"</span>);    <span class="comment">//false</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//get()</span></span><br><span class="line">String s1=a.get(<span class="number">1</span>);  <span class="comment">//d</span></span><br><span class="line">String s2=a.get(<span class="number">5</span>);  <span class="comment">//运行时抛出IndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//indexOf()</span></span><br><span class="line"><span class="keyword">int</span> i=a.indexOf(<span class="string">"a"</span>);  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//remove()</span></span><br><span class="line">a.remove(<span class="string">"a"</span>);  <span class="comment">//[d, b, c]</span></span><br><span class="line">a.remove(<span class="number">1</span>);<span class="comment">//[d, c]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//set()</span></span><br><span class="line">a.set(<span class="number">1</span>,<span class="string">"aaa"</span>);  <span class="comment">//[d, aaa]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//size()</span></span><br><span class="line"><span class="keyword">int</span> si=a.size();  <span class="comment">//2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//addAll() </span></span><br><span class="line">ArrayList&lt;String&gt; a1=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">a1.add(<span class="string">"e"</span>);</span><br><span class="line">a1.add(<span class="string">"f"</span>);</span><br><span class="line">a.addAll(a1);  <span class="comment">//[d, aaa, e, f]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//clear()</span></span><br><span class="line">a.clear();  <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(String s:a)&#123;</span><br><span class="line">  System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><br><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><p>基本上ArrayList函数都适用于LinkedList。LinkedList还可以使用如下函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Object element)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Object element)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Object <span class="title">getFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object <span class="title">getLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Object <span class="title">removeFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object <span class="title">removeLast</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><br><h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Queue代表FIFO 先进先出的队列</span></span><br><span class="line">Queue&lt;String&gt; q= <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//offer() 加在队列的最后面</span></span><br><span class="line">q.offer(<span class="string">"aa"</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//poll() 取出并返回第一个。如果队列为空，返回null</span></span><br><span class="line">String s1 = q.poll();</span><br><span class="line"></span><br><span class="line"><span class="comment">//peek() 查看第一个，但是不取出来。如果队列为空，返回null</span></span><br><span class="line">String s2 = q.peek()</span><br></pre></td></tr></table></figure><br><h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看stack顶部的元素</span></span><br><span class="line"><span class="function">Object <span class="title">peek</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">//取出并返回stack顶部元素</span></span></span><br><span class="line"><span class="function">Object <span class="title">pop</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//加在stack顶部</span></span></span><br><span class="line"><span class="function">Object <span class="title">push</span><span class="params">(Object element)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//判断stack是否为空</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><br><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,String&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">m.put(<span class="string">"name"</span>, <span class="string">"Tony"</span>);</span><br><span class="line">m.put(<span class="string">"address"</span>, <span class="string">"Guangzhou"</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//遍历map</span></span></span><br><span class="line"><span class="function"><span class="title">for</span> <span class="params">(Map.Entry&lt;String, String&gt; entry : m.entrySet()</span>) </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="Collections常用函数"><a href="#Collections常用函数" class="headerlink" title="Collections常用函数"></a>Collections常用函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> ArrayList&lt;&gt;();         </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    numbers.add(i);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">Collections.reverse(numbers);</span><br><span class="line"></span><br><span class="line">Collections.sort(numbers);</span><br><span class="line"></span><br><span class="line">Collections.swap(numbers,<span class="number">0</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><br><h1 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; slist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接使用Collections.sort(slist)会编译出错</span></span><br><span class="line"><span class="comment">//需引入Comparator，指定比较的算法, 这里按score1由低到高排序</span></span><br><span class="line">Comparator&lt;Student&gt; comp = <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按照score1进行排序</span></span><br><span class="line">        <span class="keyword">if</span>(s1.score1&gt;=s2.score1)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//正数表示h1比h2要大</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Collections.sort(slist, comp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者Student类实现Comparable接口，在类里面提供比较的算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score2;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Hero h)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(score1&gt;=h.score1)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Collections.sort(slist);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; a=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//add()函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.add(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);     &lt;span class=&quot;comment&quot;&gt;//[a]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.add(&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;);		&lt;span class=&quot;comment&quot;&gt;//[a, b]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.add(&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;);		&lt;span class=&quot;comment&quot;&gt;//[a, b, c]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//[a, d, b, c]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//contains()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; b=a.contains(&lt;span class=&quot;string&quot;&gt;&quot;f&quot;&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//get()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String s1=a.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String s2=a.get(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//运行时抛出IndexOutOfBoundsException&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//indexOf()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=a.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//remove()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.remove(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//[d, b, c]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.remove(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//[d, c]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//set()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.set(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;aaa&quot;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//[d, aaa]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//size()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; si=a.size();  &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//addAll() &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; a1=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a1.add(&lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a1.add(&lt;span class=&quot;string&quot;&gt;&quot;f&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.addAll(a1);  &lt;span class=&quot;comment&quot;&gt;//[d, aaa, e, f]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//clear()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.clear();  &lt;span class=&quot;comment&quot;&gt;//[]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String s:a)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.out.println(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="java" scheme="http://anye137.github.io/categories/java/"/>
    
    
    <category term="java" scheme="http://anye137.github.io/tags/java/"/>
    
    <category term="集合框架" scheme="http://anye137.github.io/tags/集合框架/"/>
    
  </entry>
  
  <entry>
    <title>用hexo搭建博客</title>
    <link href="http://anye137.github.io/2018/hexo-blog/"/>
    <id>http://anye137.github.io/2018/hexo-blog/</id>
    <published>2018-01-31T09:46:57.000Z</published>
    <updated>2022-04-03T13:22:07.393Z</updated>
    
    <content type="html"><![CDATA[<p>​        -</p><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><p>使用hexo+github搭建个人博客，具体操作见参考网址<br><a href="http://mp.weixin.qq.com/s/rMZZkHbMeKXsSAvAdsgyRw" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/rMZZkHbMeKXsSAvAdsgyRw</a></p><br><h1 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h1><p>这里我用的是next主题，GitHub地址<br><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a><br>在站点目录打开git bash，输入</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>将next主题下载到站点目录的themes&#x2F;next文件夹中。打开站点的_config.yml配置文件，修改主题为next</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>next主题有好几种样式。打开主题中的_config.yml文件，进行设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure><p>最后在站点目录下打开git bash，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>到此，主题修改完毕。<br>其他一些配置，诸如修改作者昵称、头像、网页标题、图标、博客语言，以及增加标签页面和分类页面，设置主页底部的站点建立时间等</p><p>可参考next主题的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">GitHub</a> 以及 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT使用文档</a></p><br><h1 id="添加本地搜索功能"><a href="#添加本地搜索功能" class="headerlink" title="添加本地搜索功能"></a>添加本地搜索功能</h1><p>参考网址<br><a href="http://hisen.me/20170407-Hexo%20next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%20-%20%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">http://hisen.me/20170407-Hexo%20next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%20-%20%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1/</a></p><p>内容摘录如下：</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在站点根目录打开git bash，输入以下内容，安装 hexo-generator-search 和 hexo-generator-searchdb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><h2 id="启用搜索"><a href="#启用搜索" class="headerlink" title="启用搜索"></a>启用搜索</h2><p>编辑站点文件_config.yml，添加以下内容开启搜索</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>编辑主题文件_config.yml，启用本地搜索功能：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>最后重新生成和部署站点就行了</p><br><h1 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>站点目录下，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="string">"blog_name"</span></span><br></pre></td></tr></table></figure><p>然后站点目录下source&#x2F;_post文件夹中多了一个 blog_name.md 文件，此文件的内容即是博客的内容。我们可以使用编辑器编辑此文件。个人推荐的编辑器是<a href="https://www.typora.io/?mt=8&uo=4&ct=appcards" target="_blank" rel="noopener">Topyra</a> 或 <a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">Cmd Markdown</a></p><h2 id="添加标签和分类"><a href="#添加标签和分类" class="headerlink" title="添加标签和分类"></a>添加标签和分类</h2><p>blog_name.md文件开头是这样的</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 用hexo搭建博客</span><br><span class="line">date: 2018-01-31 17:46:57</span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加标签和分类，如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 用hexo搭建博客</span><br><span class="line">date: 2018-01-31 17:46:57</span><br><span class="line">tags: [hexo]</span><br><span class="line">categories: hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>多个标签可用逗号隔开</p><p>若要创建多级分类，则</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories: </span><br><span class="line">  - 一级分类</span><br><span class="line">  - 二级分类</span><br></pre></td></tr></table></figure><p>要想新建博客时默认带上tags: [] 和 categories:</p><p>打开站点目录下 scaffolds&#x2F;post.md 文件，默认内容如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>修改成</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: []</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="设置阅读全文"><a href="#设置阅读全文" class="headerlink" title="设置阅读全文"></a>设置阅读全文</h2><p>默认情况下，站点首页会显示最新的文章的全部内容，我们可以设置成只显示文章的一部分，然后在后面提供一个链接<strong>阅读全文</strong>来进入文章的详情页。</p><p>在文章中合适的位置添加 <code>&lt; !--more--&gt;</code> 标签，这样只有标签前的内容会在首页中显示</p><br><h1 id="预览和发布博客"><a href="#预览和发布博客" class="headerlink" title="预览和发布博客"></a>预览和发布博客</h1><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>保存博客md文件，进入站点目录，打开git bash，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure><p>浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 即可预览</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>在站点目录下，打开git bash，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>即可将博客内容部署到GitHub</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>至此，hexo搭建博客基本完成啦O(∩_∩)O</p><p>其实我之前用过WordPress搭建过博客，然而写了十篇左右就没怎么写了，后来那个站点也弃了，改用有道云笔记记录自己平时的学习笔记。希望以后在做好有道云笔记的同时，也多写写博客！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        -&lt;/p&gt;
&lt;h1 id=&quot;搭建博客&quot;&gt;&lt;a href=&quot;#搭建博客&quot; class=&quot;headerlink&quot; title=&quot;搭建博客&quot;&gt;&lt;/a&gt;搭建博客&lt;/h1&gt;&lt;p&gt;使用hexo+github搭建个人博客，具体操作见参考网址&lt;br&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s/rMZZkHbMeKXsSAvAdsgyRw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mp.weixin.qq.com/s/rMZZkHbMeKXsSAvAdsgyRw&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;h1 id=&quot;修改主题&quot;&gt;&lt;a href=&quot;#修改主题&quot; class=&quot;headerlink&quot; title=&quot;修改主题&quot;&gt;&lt;/a&gt;修改主题&lt;/h1&gt;&lt;p&gt;这里我用的是next主题，GitHub地址&lt;br&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/iissnan/hexo-theme-next&lt;/a&gt;&lt;br&gt;在站点目录打开git bash，输入&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://anye137.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://anye137.github.io/tags/hexo/"/>
    
    <category term="博客" scheme="http://anye137.github.io/tags/博客/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://anye137.github.io/2018/hexo-hello-world/"/>
    <id>http://anye137.github.io/2018/hexo-hello-world/</id>
    <published>2018-01-31T04:46:57.000Z</published>
    <updated>2022-04-03T13:22:07.392Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.</summary>
      
    
    
    
    <category term="hexo" scheme="http://anye137.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://anye137.github.io/tags/hexo/"/>
    
    <category term="博客" scheme="http://anye137.github.io/tags/博客/"/>
    
  </entry>
  
</feed>
